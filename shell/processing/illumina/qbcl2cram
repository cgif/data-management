#!/bin/bash
#
# sets up directory structure and generates, configures and submits scripts to run
# bcl2fastq conversion, generate fastqc reports, map reads to a reference geneome,
# convert BAM to CRAM files and deploy CRAM files into iRODS on eliot
#

#CONFIGURATION
##############

# getting present date and time
NOW="date +%Y-%m-%d%t%T%t"

# getting present date
TODAY=`date +%Y-%m-%d`


# returns absolute path to qfastqc directory, not changing your current directory
# setting all default values for the pipeline
BASEDIR="$( cd "$( dirname "$0" )" && pwd )"
BASE_PYTHON_DIR=''                                  ## set python dir path
USAGE="$BASEDIR/qbcl2cram.usage"			
DATA_VOL_IGF=/project/tgu
DEPLOYMENT_SERVER=eliot.med.ic.ac.uk    
DEPLOYMENT_BASE_DIR=/www/html/report
QUEUE=pqcgi

# DEPLOYMENT SETTINGS
# DO NOT CHANGE
CUSTOMERS_FILEPATH=/home/igf/docs/igf/users/
DEPLOYMENT_PATH=/www/html/report/project
HTACCESS=.htaccess
HTPASSWD=.htpasswd
TEMPLATE_PATH=$BASEDIR/../../../templates
HTACCESS_TML=$TEMPLATE_PATH/htaccess.tml
HTPASSWD_TML=$TEMPLATE_PATH/htpasswd.tml


# BCL2FASTQ
# Adding new parameters for bcl2fastq v2
WALLTIME_HOURS_PER_JOB_BCL2FASTQ=72
TMP_SPACE_GB_BCL2FASTQ=100
## THREADS_PER_RUN_BCL2FASTQ=2                    ## this option doesn't exists anymore
## PATH_ADAPTER_DIR=$BASEDIR/../../../resources    ## this option doesn't exists anymore
BCL2FASTQ_LOADING_THREADS=1
BCL2FASTQ_PROCESSING_THREADS=1
BCL2FASTQ_WRITING_THREADS=1
READOFFSET=1
INDEXOFFSET=0

# TARBCL2FASTQ
IRODS_FASTQ_DEPLOY_SCRIPT=$BASEDIR/irods_deploy_fastq.sh
DEPLOYMENT_TAR_BASE_DIR=/data/www/html/report/data

#SPLIT FASTQ
FASTQ_FILE_SIZE_KB=20000000
THREADS_PER_RUN_SPLITFASTQ=4
WALLTIME_HOURS_SPLITFASTQ=72

#BWA
READS_PER_RUN_BWA=10000000
THREADS_PER_RUN_BWA=2
PATTERN_READ_1=_R1_
PATTERN_READ_2=_R2_
WALLTIME_HOURS_PER_RUN_BWA=30

FASTQC_SCRIPT_DIR=$BASEDIR/../../../../workflows/shell/pre_processing/fastqc
WORKFLOWS_RESOURCES_DIR=$BASEDIR/../../../../workflows/shell/resources
GROUP_VOL_CGI=/groupvol/cgi
BWA_SCRIPTS_DIR=$BASEDIR/../../../../workflows/shell/mapping/bwa
SPLIT_FASTQ_SCRIPT_DIR=$BASEDIR/../../../../workflows/shell/mapping/bwa/
TOPHAT_SCRIPTS_DIR=$BASEDIR/../../../../workflows/shell/mapping/tophat

# Changed the BCL2FASTQ version
#BCL2FASTQ_VERSION=1.8.4
BCL2FASTQ_VERSION=2.18
SAMTOOLS_VERSION=1.1
BWA_VERSION=0.7.5a

#SERP
SERP_SCRIPT=$BASEDIR/serp.pl
SERP_DEPENDENCIES="afterany"

#SPLIT_SCRIPT
#SPLIT_SCRIPT_DIR=$BASEDIR/split_fastq.sh

#COMMAND LINE ARGS
##################

USE_IRODS="T"
REMOVE_ADAPTORS="F"
REMOVE_BAMS="T"

####### XXXXXXXXXXX
while getopts "i:t:a:b:m:dh" option; do
case "$option" in
	i) INPUT_SEQRUN_DIR="$OPTARG";;
	t) USE_IRODS="$OPTARG";;
	a) REMOVE_ADAPTORS="$OPTARG";;
	b) REMOVE_BAMS="$OPTARG";;
	h) cat "$USAGE"; exit 0;;
	[?]) cat "$USAGE"; exit 1;;
esac
done

#check if required arguments are missing
if [ -z $INPUT_SEQRUN_DIR ]
then
	cat "$USAGE"
	exit 1
fi

export PYTHONPATH=$BASE_PYTHON_DIR:$PYTHONPATH  ## set PYTHONPATH lib

#FUNCTIONS
##########

#creates job scripts
function submitbcl2fastqJobs {
        ## $INPUT_SEQRUN_DIR $SampleSheet $lane_idx_length $adapter_type $mixedIndexLanes
	#bcl2Fastq variables
	local seqrun_directory=$1
	local path_sample_sheet=$2
	local path_sample_sheet_reformatted=$2
	#local path_sample_sheet_reformatted=$3
	local lane=$3
	#local lane=$4
	local adapter_type=$4
	#local adapter_type=$5
	local mixedIndexLanes=$5
	#local mixedIndexLanes=$6
        
 
	#BCL2FASTQ CONVERSION
	#####################


	tlane=`echo $lane | cut -d "_" -f1`

 	#reads from RunInfo if it is Single-Read or Paired-End Sequencing RUN 
 	pairedEnd=`cat $INPUT_SEQRUN_DIR/RunInfo.xml | grep "Read Number=\"4\"" | wc -l`
 	#echo "pairedEnd $pairedEnd"
 	#mixedIndex=`echo $mixedIndexLanes | grep $lane | wc -l`
 	#echo "mixedIndex $mixedIndex"
	
 	#if [ $pairedEnd -eq 1 ] && [ $mixedIndex -eq 1 ]
 	#then
	#	echo "`$NOW` RUN mixed Index and paired-end "
 	#	mixedIndexes=0
 	#else
	#	if [ $mixedIndex -eq 1 ]
	#	then
	#		echo "`$NOW` RUN mixed Index and single read "
	#	fi
 	#	mixedIndexes=$mixedIndex
 	#fi	

 	#make bases mask pass also mixedIndex information
 	#local bases_mask=`$BASEDIR/makeBasesMask.pl $path_sample_sheet $INPUT_SEQRUN_DIR/RunInfo.xml $tlane $mixedIndex`
        local_bases_mask=`$BASE_PYTHON_DIR/scripts/basesMask/makeBasesMask.py --samplesheet_file $path_sample_sheet --runinfo_file $INPUT_SEQRUN_DIR/RunInfo.xml --read_offset $READOFFSET --index_offset $INDEXOFFSET`
	echo "Sample sheet passed to make mask $path_sample_sheet"
	
	#create summary directory on deployment server
	local bcl2fastq_summary_deployment=$DEPLOYMENT_BASE_DIR/seqrun/$SEQRUN_NAME/bcl2fastq/$TODAY
	ssh $DEPLOYMENT_SERVER "mkdir -p -m 775 $bcl2fastq_summary_deployment"  > /dev/null 2>&1
	ssh $DEPLOYMENT_SERVER "chmod -R 775 $DEPLOYMENT_BASE_DIR/seqrun/$SEQRUN_NAME"  > /dev/null 2>&1
	
	echo -n $lane >> $BCL2FASTQ_JOB_ID_LIST

	local bcl2fastq_script=$PATH_RUN_DIR_BCL2FASTQ/bcl2Fastq.$SEQRUN_NAME.${lane}.sh
	cp $BASEDIR/bcl2fastq.sh $bcl2fastq_script
	chmod 770 $bcl2fastq_script

	sed -i -e "s/#walltimeHours/$WALLTIME_HOURS_PER_JOB_BCL2FASTQ/" $bcl2fastq_script
	#sed -i -e "s/#threads/$THREADS_PER_RUN_BCL2FASTQ/" $bcl2fastq_script
	sed -i -e "s/#loading_threads/$BCL2FASTQ_LOADING_THREADS/" $bcl2fastq_script
	sed -i -e "s/#processing_threads/$BCL2FASTQ_PROCESSING_THREADS/" $bcl2fastq_script
	sed -i -e "s/#writing_threads/$BCL2FASTQ_WRITING_THREADS/" $bcl2fastq_script
	sed -i -e "s/#runName/$SEQRUN_NAME/" $bcl2fastq_script
	sed -i -e "s/#pathSampleSheet/${path_sample_sheet_reformatted//\//\\/}/" $bcl2fastq_script
	sed -i -e "s/#lane/$tlane/" $bcl2fastq_script
	sed -i -e "s/#basesMask/$bases_mask/" $bcl2fastq_script
	sed -i -e "s/#tmpSpace/$TMP_SPACE_GB_BCL2FASTQ/" $bcl2fastq_script
	sed -i -e "s/#queue/$QUEUE/" $bcl2fastq_script
	sed -i -e "s/#pathSeqRunDir/${seqrun_directory//\//\\/}/" $bcl2fastq_script
	sed -i -e "s/#dataVolIgf/${DATA_VOL_IGF//\//\\/}/" $bcl2fastq_script
	sed -i -e "s/#bcl2FastqVersion/$BCL2FASTQ_VERSION/" $bcl2fastq_script
	sed -i -e "s/#pathRunDir/${PATH_RUN_DIR_BCL2FASTQ//\//\\/}/" $bcl2fastq_script
	sed -i -e "s/#pathResultsDir/${PATH_RESULTS_DIR_BCL2FASTQ//\//\\/}/" $bcl2fastq_script
	sed -i -e "s/#pathRawDataDir/${PATH_RAWDATA_DIR//\//\\/}/" $bcl2fastq_script
	sed -i -e "s/#deploymentServer/${DEPLOYMENT_SERVER//\//\\/}/" $bcl2fastq_script
	sed -i -e "s/#deploymentPath/${bcl2fastq_summary_deployment//\//\\/}/" $bcl2fastq_script
	sed -i -e "s/#pathAdapterDir/${PATH_ADAPTER_DIR//\//\\/}/" $bcl2fastq_script
	sed -i -e "s/#adapterType/$adapter_type/" $bcl2fastq_script
	sed -i -e "s/#pathTemplateHtm/${TEMPLATE_PATH//\//\\/}/" $bcl2fastq_script
	sed -i -e "s/#mixedIndexes/$mixedIndexes/" $bcl2fastq_script
	sed -i -e "s/#ilane/$lane/" $bcl2fastq_script
	sed -i -e "s/#removeAdaptors/$REMOVE_ADAPTORS/" $bcl2fastq_script

	local log_path=`echo $bcl2fastq_script | perl -pe 's/\.sh/\.log/g'`
	echo -n "`$NOW`submitting bcl2fastq job: " 
	echo "bcl2Fastq.$SEQRUN_NAME.$lane.sh"
	
	local job_id=null
	echo "qsub -o $log_path $bcl2fastq_script"
	job_id=`qsub -o $log_path $bcl2fastq_script`	
	echo ",$job_id" >> $BCL2FASTQ_JOB_ID_LIST			

}

# creates job script to tar bcl2fastqresults
function submitIrodsDeployFastq {
                local path_sample_sheet_reformatted=$1
	
                local rowcount=0
                # lookup lanes for each project_tag
                while read sampleSheetRow
                do
                        #skip sample sheet header
                        rowcount=$(( $rowcount + 1 ))
                        if [ "$rowcount" -eq "1" ]
                        then
                                continue
                        fi

                        #get current 	lane...
                        local sample_lane=`echo $sampleSheetRow | cut -f2 -d ','| perl -pe 's/\s//g'`
                        #get project_tag
                        #local project_name=`echo $sampleSheetRow | cut -f10 -d ','| cut -f1 -d ':' |perl -pe 's/\s//g'`
                        local project_name=`echo $sampleSheetRow | cut -f10 -d ',' |perl -pe 's/\s//g'`
                        #local customer_name=`echo $sampleSheetRow | cut -f10 -d ','| cut -f2 -d ':' |perl -pe 's/\s//g'`
			
			# create a file with sample_lane foreach project_tag
			chmod 770 $PATH_RUN_DIR_BCL2FASTQ
                        echo $sample_lane >>  $PATH_RUN_DIR_BCL2FASTQ/$project_name.prj

                done < $path_sample_sheet_reformatted
		 
		
		#create the appropriate index forlane statistics
		#cp $TEMPLATE_PATH/lanes.htm $PATH_RUN_DIR_BCL2FASTQ/index.html

                for project_file in `ls --color=never $PATH_RUN_DIR_BCL2FASTQ | grep .prj`
                do
                        #for each lane in project_tag
                        local tarresults_job_dependency="afterok"

                        for projectTagRow in `cat $PATH_RUN_DIR_BCL2FASTQ/$project_file | sort | uniq`
                        do
				chmod 660 $PATH_RUN_DIR_BCL2FASTQ/$project_file
                                local lane=`echo $projectTagRow | perl -pe 's/\s//g'`
				# for TEST
                                #echo "# File project "$lane"#"
                                while read jobListRow
                                do
                                        local jobListLane=`echo $jobListRow | cut -f1 -d ',' | cut -f1 -d '_' | perl -pe 's/\s//g'`
					# for TEST
                                        #echo "# Job List -"$jobListLane"-#"
                                        if [ "$jobListLane" -ne "$lane" ]
                                        then
                                                continue
                                        fi
                                        #get job_id and verify if it is based ong project_tag
                                        local bcl2fastq_job_id=`echo $jobListRow | cut -f2 -d ','| perl -pe 's/\s//g'`

                                        #collect job ids for dependency variable
                                        job_id=`basename $bcl2fastq_job_id .cx1b`
                                        tarresults_job_dependency="$tarresults_job_dependency:$job_id"

                                done <$BCL2FASTQ_JOB_ID_LIST
				# for TEST
                                #echo $tarresults_job_dependency
				#sed -i '/<!--/{ N; N; s/.*\n\(.*href=lane'${lane}'.*\)\n.*-->.*/\1/; }' $PATH_RUN_DIR_BCL2FASTQ/index.html 
                        done

                        #########################################
                        ### create e configure tarJobScript ####
			local project_tag=`basename $project_file .prj`
                        local deploy_irods_fastq_script=$PATH_RUN_DIR_BCL2FASTQ/irods_deploy_fastq.${project_tag}.sh
			local deployment_symbolic_link=/www/html/report/project/$project_tag
			local bcl2fastq_summary_deployment=$DEPLOYMENT_BASE_DIR/seqrun/$SEQRUN_NAME/bcl2fastq/$TODAY

                        cp $IRODS_FASTQ_DEPLOY_SCRIPT $deploy_irods_fastq_script
                        chmod 770 $deploy_irods_fastq_script
                        path_project_tag_dir=$DATA_VOL_IGF/rawdata/$project_tag/fastq
                        sed -i -e "s/#pathProjectTagDir/${path_project_tag_dir//\//\\/}/" $deploy_irods_fastq_script
                        sed -i -e "s/#seqRunDate/$SEQRUN_DATE/" $deploy_irods_fastq_script
                        sed -i -e "s/#seqRunName/$SEQRUN_NAME/" $deploy_irods_fastq_script
                        sed -i -e "s/#runDirBcl2Fastq/${PATH_RUN_DIR_BCL2FASTQ//\//\\/}/" $deploy_irods_fastq_script
                        sed -i -e "s/#customerFilePath/${INPUT_SEQRUN_DIR//\//\\/}/" $deploy_irods_fastq_script
                        sed -i -e "s/#projectTag/$project_tag/" $deploy_irods_fastq_script
                        sed -i -e "s/#mailTemplatePath/${TEMPLATE_PATH//\//\\/}/" $deploy_irods_fastq_script
                        sed -i -e "s/#pathToDestination/${path_project_tag_dir//\//\\/}/" $deploy_irods_fastq_script
####### XXXXXXXXXXX
                        sed -i -e "s/#useIrods/$USE_IRODS/" $deploy_irods_fastq_script

			#submit job 
			local log_output_path=`echo $deploy_irods_fastq_script | perl -pe 's/\.sh/\.log/g'`
			echo -n "" > $log_output_path			
			echo -n "`$NOW`submitting tarresult job: " 
			echo "$deploy_irods_fastq_script"


			local job_id=null
		  	job_id=`qsub -q $QUEUE -W depend=$tarresults_job_dependency -o $log_output_path -j oe $deploy_irods_fastq_script`
			echo "qsub -q $QUEUE -W depend=$tarresults_job_dependency -o $log_output_path -j oe $deploy_irods_fastq_script"
			echo "`$NOW`Job ID:$job_id"
			SERP_DEPENDENCIES=$SERP_DEPENDENCIES:$job_id
		done

}


function submitfastqcJobs {			

	local path_sample_sheet_reformatted=$1


	echo "reformatted sample sheet Quality control"
	cat $path_sample_sheet_reformatted

	## adding html for lanes statistics
	echo " adding html for lanes statistics"
        chmod 775 ${PATH_RUN_DIR_BCL2FASTQ}/index.html
        local bclfastq_deployment_path=$DEPLOYMENT_BASE_DIR/seqrun/$SEQRUN_NAME/bcl2fastq/$TODAY
        scp $PATH_RUN_DIR_BCL2FASTQ/index.html  $DEPLOYMENT_SERVER:$bclfastq_deployment_path/index.html < /dev/null
        ssh $DEPLOYMENT_SERVER "chmod -R 664 $bclfastq_deployment_path/index.html" < /dev/null
	#create directory structure for each project in sample sheet
	for project in `sed 1d $path_sample_sheet_reformatted | cut -d ',' -f10 |perl -e 'while(<>){ s/\s//g; print "$_\n";}' | sort | uniq`
	do
	
		#create and set permissions for analysis project parent directory
		#project_analysis_dir=$DATA_VOL_IGF/analysis/$project/fastqc/$TODAY
		#mkdir -m 770 -p $project_analysis_dir		
		#mkdir -m 770 -p $project_analysis_dir/multisample		
			
		#create and set permissions for run directory
		project_runs_dir=$DATA_VOL_IGF/runs/$project/fastqc/$TODAY
		mkdir -m 770 -p $project_runs_dir
		ms_runs_dir=$project_runs_dir/multisample
		mkdir -m 770 -p $ms_runs_dir
		chmod -R 770 $DATA_VOL_IGF/runs/$project
						
		#create and set permissions for results project parent directory
		project_results_dir=$DATA_VOL_IGF/results/$project/fastqc/$SEQRUN_DATE
		mkdir -m 770 -p $project_results_dir
		# aggiunto io
		mkdir -m 770 -p $project_results_dir/multisample
		chmod -R 770 $DATA_VOL_IGF/results/$project

		local job_id_list=$ms_runs_dir/job_id_list.$SEQRUN_NAME.txt
		echo -n "" > $job_id_list
		chmod 660 $job_id_list	
		
		#create summary directory on deployment server
		local fastqc_summary_deployment=$DEPLOYMENT_BASE_DIR/project/$project/fastqc/$SEQRUN_DATE
		ssh $DEPLOYMENT_SERVER "mkdir -p -m 775 $fastqc_summary_deployment"  < /dev/null 
		ssh $DEPLOYMENT_SERVER "chmod -R 775 $DEPLOYMENT_BASE_DIR/project/$project"  < /dev/null 
		scp -r ${FASTQC_SCRIPT_DIR}/../../resources/images/error.png $DEPLOYMENT_SERVER:$fastqc_summary_deployment/ < /dev/null
		scp -r ${FASTQC_SCRIPT_DIR}/../../resources/images/tick.png $DEPLOYMENT_SERVER:$fastqc_summary_deployment/ < /dev/null
		scp -r ${FASTQC_SCRIPT_DIR}/../../resources/images/warning.png $DEPLOYMENT_SERVER:$fastqc_summary_deployment/ < /dev/null
		scp -r ${FASTQC_SCRIPT_DIR}/../../resources/images/igf.png $DEPLOYMENT_SERVER:$fastqc_summary_deployment/ < /dev/null
		ssh $DEPLOYMENT_SERVER "chmod -R 664 $fastqc_summary_deployment/*png" < /dev/null

	done

	#submit FastQC jobs for each sample
	###################################
	
	while read row
	do

		local lane=`echo $row | cut -f1 -d ',' | cut -d "_" -f1`

		local bcl2fastq_job_id=`echo $row | cut -f2 -d ','`

		local number_samples_x_lane=`cat $path_sample_sheet_reformatted | grep ^,$lane | wc -l`
			
		local rowcount=0
		while read line
		do
			
			#skip sample sheet header
			rowcount=$(( $rowcount + 1 )) 
			if [ "$rowcount" -eq "1" ]
			then
				continue
			fi

			#skip samples not in current lane...
			local sample_lane=`echo $line | cut -f2 -d ',' | perl -pe 's/\s//g'`
			if [ "$sample_lane" -ne "$lane" ]
			then
				continue
			fi

			#..for samples in current lane...
			local sample_name=`echo $line | cut -f3 -d ',' | perl -pe 's/\s//g'`
			local index=`echo $line | cut -f5 -d ',' | perl -pe 's/\s//g'`
			local project_name=`echo $line | cut -f10 -d ',' | cut -d ':' -f1 | perl -pe 's/\s//g'`			
							
			local path_reads_dir=$DATA_VOL_IGF/rawdata/$project_name/fastq/$SEQRUN_DATE/$sample_name
			local fastq_read1=${SEQRUN_NAME}_${index}_L00${lane}_R1_001.fastq.gz
			local fastq_read2=${SEQRUN_NAME}_${index}_L00${lane}_R2_001.fastq.gz
			
			#create output directory for the QC reports for each file
			echo "`$NOW`creating output directory for QC reports of sample $sample_name "
			local project_runs_dir=$DATA_VOL_IGF/runs/$project_name/fastqc/$TODAY
			local project_results_dir=$DATA_VOL_IGF/results/$project_name/fastqc/$SEQRUN_DATE
			local qc_report_outputdir=$project_results_dir/$sample_name
			
			local ms_runs_dir=$project_runs_dir/multisample

			mkdir -m 770 -p $qc_report_outputdir
			
			local job_id_list=$ms_runs_dir/job_id_list.$SEQRUN_NAME.txt

			#create deployment directories for the QC reports for each file
			local fastqc_deployment_path=$DEPLOYMENT_BASE_DIR/project/$project_name/fastqc/$SEQRUN_DATE/$sample_name
			local fastqc_summary_deployment=$DEPLOYMENT_BASE_DIR/project/$project_name/fastqc/$SEQRUN_DATE
	
			#create fastqc script from template
			echo "`$NOW`creating and submitting job scripts for QC of fastq files for sample $sample_name in lane $lane"
		
			#handling each fastq file, in each sample directory
			local sample_runs_dir=$project_runs_dir/$sample_name
			mkdir -m 770 -p $sample_runs_dir
			
			local fastQC_script_path=$sample_runs_dir/fastQC.$fastq_read1.sh	
			cp $FASTQC_SCRIPT_DIR/fastQC.sh $fastQC_script_path
			chmod 770 $fastQC_script_path			
		
			#configure fastqc script
			sed -i -e "s/#pathReadsFastq/${path_reads_dir//\//\\/}/" $fastQC_script_path
			sed -i -e "s/#fastqRead1/${fastq_read1//\//\\/}/" $fastQC_script_path
			sed -i -e "s/#fastqRead2/${fastq_read2//\//\\/}/" $fastQC_script_path
			sed -i -e "s/#pathQcReportDir/${qc_report_outputdir//\//\\/}/" $fastQC_script_path
			sed -i -e "s/#singleReads/F/" $fastQC_script_path
			sed -i -e "s/#deploymentServer/${DEPLOYMENT_SERVER//\//\\/}/" $fastQC_script_path	
  			sed -i -e "s/#deploymentPath/${fastqc_deployment_path//\//\\/}/" $fastQC_script_path	
			sed -i -e "s/#summaryPath/${fastqc_summary_deployment//\//\\/}/" $fastQC_script_path
			sed -i -e "s/#numberSamplesXLane/$number_samples_x_lane/" $fastQC_script_path

		  	#submit job 
		  	log_output_path=`echo $fastQC_script_path | perl -pe 's/\.sh/\.log/g'`

			local job_id=null
			echo "qsub -W depend=afterok:$bcl2fastq_job_id -o $log_output_path $fastQC_script_path"
		  	job_id=`qsub -W depend=afterok:$bcl2fastq_job_id -o $log_output_path $fastQC_script_path`
		  	#job_id=`qsub -o $log_output_path $fastQC_script_path`
			echo "`$NOW`Read pair: $fastq_read1 AND $fastq_read2"		
			echo "`$NOW`Job ID: $job_id"
			echo -e "$job_id" >> $job_id_list				

		done <$path_sample_sheet_reformatted

	done <$BCL2FASTQ_JOB_ID_LIST

	#submit summary job for each project
	####################################
	
	for project in `sed 1d $path_sample_sheet_reformatted | cut -d ',' -f10 | perl -e 'while(<>){ s/\s//g; print "$_\n";}' | sort | uniq`
	do

		echo "`$NOW`creating and submitting job script for summary of results"
		#create summary script from template
        	local project_rawdata_dir=$DATA_VOL_IGF/rawdata/$project/fastq/$SEQRUN_DATE
		local project_runs_dir=$DATA_VOL_IGF/runs/$project/fastqc/$TODAY
		local project_results_dir=$DATA_VOL_IGF/results/$project/fastqc/$SEQRUN_DATE
		
		local ms_runs_dir=$project_runs_dir/multisample		
		
		local ms_results_dir=$project_results_dir/multisample
	
		local summary_path=$ms_runs_dir/summary.$SEQRUN_NAME.pl
		cp $FASTQC_SCRIPT_DIR/summary_fastqc.pl $summary_path
		chmod 770 $summary_path

		local path_fastq_dir=$project_rawdata_dir
		
		local fastqc_summary_deployment=$DEPLOYMENT_BASE_DIR/project/$project/fastqc/$SEQRUN_DATE

		#configure summary script, it will be executed from fastqc script
		sed -i -e "s/#pathReadsFastq/${path_fastq_dir//\//\\/}/" $summary_path
		sed -i -e "s/#pathReportsDir/${project_results_dir//\//\\/}/" $summary_path
		sed -i -e "s/#pathRunsDir/${project_runs_dir//\//\\/}/" $summary_path
		sed -i -e "s/#pathMSReportsDir/${ms_results_dir//\//\\/}/" $summary_path
		sed -i -e "s/#deploymentServer/$DEPLOYMENT_SERVER/" $summary_path
		sed -i -e "s/#summaryDeployment/${fastqc_summary_deployment//\//\\/}/" $summary_path

		#summary is on hold until fastqc runs are completed 
		#collect fastqc job ids for dependency variable
		local job_id_list=$ms_runs_dir/job_id_list.$SEQRUN_NAME.txt
		local summary_job_dependency="afterany"
		for job_id in `grep 'cx1' $job_id_list`
		do

			job_id=`basename $job_id .cx1b`
			summary_job_dependency="$summary_job_dependency:$job_id"

		done

		#submit job 
		local log_output_path=`echo $summary_path | perl -pe 's/\.pl/\.log/g'`

		local job_id=null
		job_id=`qsub -q $QUEUE -W depend=$summary_job_dependency -o $log_output_path -j oe $summary_path`
		echo "qsub -q $QUEUE -W depend=$summary_job_dependency -o $log_output_path -j oe $summary_path"
		echo "`$NOW`Job ID:$job_id"
		SERP_DEPENDENCIES=$SERP_DEPENDENCIES:$job_id		

		########################## XXXXXX ##########################
		#               configure MultiQC script                   #
		########################## XXXXXX ##########################
		local multiqc_path=$ms_runs_dir/multiqc.$SEQRUN_NAME.sh
                cp $FASTQC_SCRIPT_DIR/multiqc.sh $multiqc_path
                chmod 770 $multiqc_path

		#configure multiqc script, it will be executed from fastqc script
                sed -i -e "s/#pathReadsFastq/${path_fastq_dir//\//\\/}/" $multiqc_path
                sed -i -e "s/#pathReportsDir/${project_results_dir//\//\\/}/" $multiqc_path
                sed -i -e "s/#pathRunsDir/${project_runs_dir//\//\\/}/" $multiqc_path
                sed -i -e "s/#pathMSReportsDir/${ms_results_dir//\//\\/}/" $multiqc_path
                sed -i -e "s/#deploymentServer/$DEPLOYMENT_SERVER/" $multiqc_path
                sed -i -e "s/#summaryDeployment/${fastqc_summary_deployment//\//\\/}/" $multiqc_path

		#submit job 
                local log_path=`echo $multiqc_path | perl -pe 's/\.sh/\.log/g'`
                job_id=`qsub -q $QUEUE -W depend=$summary_job_dependency -o $log_path -j oe $multiqc_path`
                echo "qsub -q $QUEUE -W depend=$summary_job_dependency -o $log_path -j oe $multiqc_path"
                echo "`$NOW`Job ID:$job_id"

		#prepare the email to igf fastQC report generated for project
		fastqc_mail=$PATH_RUN_DIR_BCL2FASTQ/fastqc_mail.$project
		cp $TEMPLATE_PATH/fastqc_mail.tml $fastqc_mail
		chmod 770 $fastqc_mail
		sed -i -e "s/#projectName/$project/" $fastqc_mail
		sed -i -e "s/#projectRunDate/$SEQRUN_DATE/g" $fastqc_mail

		#send the email
		local send_fastQC_email_path=$PATH_RUN_DIR_BCL2FASTQ/send_fastqc_email.$project.sh
		local log_fastQC_mail=`echo $send_fastQC_email_path | perl -pe 's/\.sh/\.log/g'`
                cp $FASTQC_SCRIPT_DIR/send_fastqc_email.sh $send_fastQC_email_path
                chmod 770 $send_fastQC_email_path
		sed -i -e "s/#mailPath/${fastqc_mail//\//\\/}/" $send_fastQC_email_path
		job_id=`qsub -q $QUEUE -W depend=$summary_job_dependency -o $log_fastQC_mail -j oe $send_fastQC_email_path`
		echo "qsub -q $QUEUE -W depend=$summary_job_dependency -o $log_fastQC_mail -j oe $send_fastQC_email_path"
	done

	#submit FastQC jobs for unassigned reads
	########################################
	local seqrun_runs_dir=$DATA_VOL_IGF/runs/seqrun/$SEQRUN_NAME/fastqc/$TODAY
	local ms_runs_dir=$seqrun_runs_dir/multisample
	mkdir -m 770 -p $seqrun_runs_dir
	mkdir -m 770 -p $ms_runs_dir
	chmod -R 770 $DATA_VOL_IGF/runs/seqrun/$SEQRUN_NAME
	
	#initialise job dependency list
	local job_id_list=$ms_runs_dir/job_id_list.$SEQRUN_NAME.txt
	echo -n "" > $job_id_list
	chmod 660 $job_id_list	
	
	while read row
	do

		local lane=`echo $row | cut -f1 -d ','| cut -d "_" -f1`
		local ilane=`echo $row | cut -f1 -d ','`
		local bcl2fastq_job_id=`echo $row | cut -f2 -d ','`
		
		local path_reads_dir=$DATA_VOL_IGF/rawdata/seqrun/fastq/$SEQRUN_NAME/Undetermined_indices/Sample_lane${ilane}
		local fastq_read1=lane${lane}_Undetermined_L00${lane}_R1_001.fastq.gz
		local fastq_read2=lane${lane}_Undetermined_L00${lane}_R2_001.fastq.gz
		local sample_name="Sample_lane${ilane}"
			
		#create output directory for the QC reports for each file
		echo "`$NOW`creating output directory for QC reports of $sample_name "
		local seqrun_runs_dir=$DATA_VOL_IGF/runs/seqrun/$SEQRUN_NAME/fastqc/$TODAY
		local seqrun_results_dir=$DATA_VOL_IGF/results/seqrun/$SEQRUN_NAME/fastqc/$SEQRUN_DATE
		local ms_runs_dir=$seqrun_runs_dir/multisample
		local qc_report_outputdir=$seqrun_results_dir/$sample_name
		
		mkdir -m 770 -p $seqrun_results_dir
		mkdir -m 770 -p $seqrun_results_dir/multisample
		mkdir -m 770 -p $qc_report_outputdir
		chmod -R 770 $DATA_VOL_IGF/results/seqrun/$SEQRUN_NAME
		chmod -R 770 $DATA_VOL_IGF/rawdata/seqrun/fastq/$SEQRUN_NAME
		
		local job_id_list=$ms_runs_dir/job_id_list.$SEQRUN_NAME.txt

		#create deployment directories for the QC reports for each file
		local fastqc_deployment_path=$DEPLOYMENT_BASE_DIR/seqrun/$SEQRUN_NAME/fastqc/$SEQRUN_DATE/$sample_name
		local fastqc_summary_deployment=$DEPLOYMENT_BASE_DIR/seqrun/$SEQRUN_NAME/fastqc/$SEQRUN_DATE
	
		#create fastqc script from template
		echo "`$NOW`creating and submitting job scripts for QC of fastq files for sample $sample_name in lane $lane"
		
		#handling each fastq file, in each sample directory
		local sample_runs_dir=$seqrun_runs_dir/$sample_name
		mkdir -m 770 -p $sample_runs_dir
			
		local fastQC_script_path=$sample_runs_dir/fastQC.$fastq_read1.sh	
		cp $FASTQC_SCRIPT_DIR/fastQC.sh $fastQC_script_path
		chmod 770 $fastQC_script_path			
		
		#configure fastqc script
		sed -i -e "s/#pathReadsFastq/${path_reads_dir//\//\\/}/" $fastQC_script_path
		sed -i -e "s/#fastqRead1/${fastq_read1//\//\\/}/" $fastQC_script_path
		sed -i -e "s/#fastqRead2/${fastq_read2//\//\\/}/" $fastQC_script_path
		sed -i -e "s/#pathQcReportDir/${qc_report_outputdir//\//\\/}/" $fastQC_script_path
		sed -i -e "s/#singleReads/F/" $fastQC_script_path
		sed -i -e "s/#deploymentServer/${DEPLOYMENT_SERVER//\//\\/}/" $fastQC_script_path	
		sed -i -e "s/#deploymentPath/${fastqc_deployment_path//\//\\/}/" $fastQC_script_path	
		sed -i -e "s/#summaryPath/${fastqc_summary_deployment//\//\\/}/" $fastQC_script_path
		sed -i -e "s/#numberSamplesXLane/$number_samples_x_lane/" $fastQC_script_path

	  	#submit job 
	  	log_output_path=`echo $fastQC_script_path | perl -pe 's/\.sh/\.log/g'`
		local job_id=null
		echo "qsub -W depend=afterok:$bcl2fastq_job_id -o $log_output_path $fastQC_script_path"
	  	job_id=`qsub -W depend=afterok:$bcl2fastq_job_id -o $log_output_path $fastQC_script_path`
	  	#job_id=`qsub -o $log_output_path $fastQC_script_path`
		echo "`$NOW`Read pair: $fastq_read1 AND $fastq_read2"		
		echo "`$NOW`Job ID: $job_id"
		echo -e "$job_id" >> $job_id_list		


		#count 
				
	done <$BCL2FASTQ_JOB_ID_LIST	
		

	#submit summary job for unassigned reads
	########################################
		
	#create summary directory on deployment server
	local fastqc_summary_deployment=$DEPLOYMENT_BASE_DIR/seqrun/$SEQRUN_NAME/fastqc/$SEQRUN_DATE
	ssh $DEPLOYMENT_SERVER "mkdir -p -m 775 $fastqc_summary_deployment"  < /dev/null
	ssh $DEPLOYMENT_SERVER "chmod -R 775 $DEPLOYMENT_BASE_DIR/seqrun/$SEQRUN_NAME"  < /dev/null
	scp -r ${FASTQC_SCRIPT_DIR}/../../resources/images/error.png $DEPLOYMENT_SERVER:$fastqc_summary_deployment/ < /dev/null
	scp -r ${FASTQC_SCRIPT_DIR}/../../resources/images/tick.png $DEPLOYMENT_SERVER:$fastqc_summary_deployment/ < /dev/null 
	scp -r ${FASTQC_SCRIPT_DIR}/../../resources/images/warning.png $DEPLOYMENT_SERVER:$fastqc_summary_deployment/ < /dev/null
	scp -r ${FASTQC_SCRIPT_DIR}/../../resources/images/igf.png $DEPLOYMENT_SERVER:$fastqc_summary_deployment/ < /dev/null
	ssh $DEPLOYMENT_SERVER "chmod -R 664 $fastqc_summary_deployment/*png" < /dev/null 
	
	echo "`$NOW`creating and submitting job script for summary of results"
	#create summary script from template
	local seqrun_runs_dir=$DATA_VOL_IGF/runs/seqrun/$SEQRUN_NAME/fastqc/$TODAY
	local seqrun_results_dir=$DATA_VOL_IGF/results/seqrun/$SEQRUN_NAME/fastqc/$SEQRUN_DATE
    	local seqrun_rawdata_dir=$DATA_VOL_IGF/rawdata/seqrun/fastq/$SEQRUN_NAME
	
	local ms_runs_dir=$seqrun_runs_dir/multisample				
	local ms_results_dir=$seqrun_results_dir/multisample
	
	mkdir -m 770 -p $ms_runs_dir
	mkdir -m 770 -p $ms_results_dir
	chmod -R 770 $DATA_VOL_IGF/runs/seqrun/$SEQRUN_NAME
	chmod -R 770 $DATA_VOL_IGF/results/seqrun/$SEQRUN_NAME
	chmod -R 770 $DATA_VOL_IGF/rawdata/seqrun/fastq/$SEQRUN_NAME
	
	local summary_path=$ms_runs_dir/summary.$SEQRUN_NAME.pl
	cp $FASTQC_SCRIPT_DIR/summary_fastqc.pl $summary_path
	chmod 770 $summary_path

	local path_fastq_dir=$seqrun_rawdata_dir/Undetermined_indices
	
	#configure summary script, it will be executed from fastqc script
	sed -i -e "s/#pathReadsFastq/${path_fastq_dir//\//\\/}/" $summary_path
	sed -i -e "s/#pathReportsDir/${seqrun_results_dir//\//\\/}/" $summary_path
	sed -i -e "s/#pathRunsDir/${seqrun_runs_dir//\//\\/}/" $summary_path
	sed -i -e "s/#pathMSReportsDir/${ms_results_dir//\//\\/}/" $summary_path
	sed -i -e "s/#deploymentServer/$DEPLOYMENT_SERVER/" $summary_path
	sed -i -e "s/#summaryDeployment/${fastqc_summary_deployment//\//\\/}/" $summary_path

	#summary is on hold until fastqc runs are completed 
	#collect fastqc job ids for dependency variable
	local job_id_list=$ms_runs_dir/job_id_list.$SEQRUN_NAME.txt
	local summary_job_dependency="afterany"
	for job_id in `grep 'cx1' $job_id_list`
	do

		job_id=`basename $job_id .cx1b`
		summary_job_dependency="$summary_job_dependency:$job_id"

	done

	#submit job 
	local log_output_path=`echo $summary_path | perl -pe 's/\.pl/\.log/g'`

	local job_id=null
	job_id=`qsub -q $QUEUE -W depend=$summary_job_dependency -o $log_output_path -j oe $summary_path`
	echo "qsub -q $QUEUE -W depend=$summary_job_dependency -o $log_output_path -j oe $summary_path"
	echo "`$NOW`Job ID:$job_id"
	SERP_DEPENDENCIES=$SERP_DEPENDENCIES:$job_id

}

#creates job scripts
function submitMappingJob {
	local path_sample_sheet_reformatted=$1
	for project_sequence_type in `cat $path_sample_sheet_reformatted  | sed 1d |  sed 's/:/,/g' | cut -d "," -f6,14 | uniq`
        do
                project=`echo $project_sequence_type | cut -d "," -f2`
                sequence_type=`echo $project_sequence_type | cut -d "," -f1`
		if [[ $sequence_type = "rna" ]]
		then
			# TOPHAT RUNS
			#############
			echo "TOPHAT"
			submitBWAMEMJobs $PATH_SAMPLE_SHEET_REFORMATTED $project
			#submitTOPHATJobs $PATH_SAMPLE_SHEET_REFORMATTED $project
		else
			# BWA RUNS
			#############
			echo "BWA"
			submitBWAMEMJobs $PATH_SAMPLE_SHEET_REFORMATTED $project
		fi
			
	done

}

#creates job scripts
function submitBWAMEMJobs {

        local path_sample_sheet_reformatted=$1
	local project=$2

        #create deployment directories
        local ms_analysis_dir=$DATA_VOL_IGF/runs/$project/bwa/$TODAY/multisample
        mkdir -m 770 -p $ms_analysis_dir
	chmod -R 770 $DATA_VOL_IGF/runs/$project
	local path_scripts_dir=$DATA_VOL_IGF/runs/$project/bwa/$TODAY
	chmod 770 $path_scripts_dir

        SETUP_LOG=$path_scripts_dir/setup.log
        echo "$project" >> $SETUP_LOG
        #create summary directory on deployment server
        local bwa_summary_deployment=$DEPLOYMENT_BASE_DIR/project/$project/bwa/$TODAY
        ssh $DEPLOYMENT_SERVER "mkdir -p -m 775 $bwa_summary_deployment" < /dev/null
        ssh $DEPLOYMENT_SERVER "chmod -R 775 $DEPLOYMENT_BASE_DIR/project/$project/bwa" < /dev/null
        scp -r ${BWA_SCRIPTS_DIR}/../../resources/images/error.png $DEPLOYMENT_SERVER:$bwa_summary_deployment/ < /dev/null
        scp -r ${BWA_SCRIPTS_DIR}/../../resources/images/tick.png $DEPLOYMENT_SERVER:$bwa_summary_deployment/ < /dev/null
        scp -r ${BWA_SCRIPTS_DIR}/../../resources/images/warning.png $DEPLOYMENT_SERVER:$bwa_summary_deployment/ < /dev/null
        ssh $DEPLOYMENT_SERVER "chmod -R 664 $bwa_summary_deployment/*png" < /dev/null


        #variables to store job dependencies
        splitfastq_dependencies="afterok"
	local rowcount=0
	while read line
	do
        	#skip sample sheet header
              	rowcount=$(( $rowcount + 1 ))
        	if [ "$rowcount" -eq "1" ]
        	then
              		continue
                fi

                local project_name=`echo $line | cut -f10 -d ',' | perl -pe 's/\s//g'`
                #skip project not in current lane...
                if [ "$project_name" != "$project" ]
                then
                	continue
                fi
                local sample_lane=`echo $line | cut -f2 -d ',' | perl -pe 's/\s//g'`
		while read row
		do
			local lane=`echo $row | cut -f1 -d ','| cut -f1 -d'_'`

                       	if [ "$sample_lane" -ne "$lane" ]
                       	then
                            	continue
                       	fi

			local bcl2fastq_job_id=`echo $row | cut -f2 -d ','`
			local jobIdcount=`echo $splitfastq_dependencies | grep $bcl2fastq_job_id | wc -l`
			if [ "$jobIdcount" -eq "0" ];then
                        	splitfastq_dependencies="$splitfastq_dependencies:$bcl2fastq_job_id"
			fi

		done <$BCL2FASTQ_JOB_ID_LIST

	done <$path_sample_sheet_reformatted


	local project_rawdata_dir=$DATA_VOL_IGF/rawdata/$project
        ########################################
        #submit splitting job
        echo "`$NOW`submitting job to split fastq files"


        local script_path=$path_scripts_dir/submitSplitFastq.$project.sh
        cp $BWA_SCRIPTS_DIR/submitSplitFastq.sh $script_path
        chmod 770 $script_path

        sed -i -e "s/#fastqGenDate/$TODAY/" $script_path
        sed -i -e "s/#dataVolIgf/${DATA_VOL_IGF//\//\\/}/" $script_path
        sed -i -e "s/#pathSampleSheetReformatted/${PATH_SAMPLE_SHEET_REFORMATTED//\//\\/}/" $script_path
        sed -i -e "s/#pathProjectTagDir/${project_rawdata_dir//\//\\/}/" $script_path
        sed -i -e "s/#seqRunDate/$SEQRUN_DATE/" $script_path
        sed -i -e "s/#seqRunName/$SEQRUN_NAME/" $script_path
        sed -i -e "s/#projectTag/$project/" $script_path
        sed -i -e "s/#bwaScriptDir/${BWA_SCRIPTS_DIR//\//\\/}/" $script_path
        sed -i -e "s/#deploymentServer/$DEPLOYMENT_SERVER/" $script_path
        sed -i -e "s/#deploymentBaseDir/${DEPLOYMENT_BASE_DIR//\//\\/}/" $script_path
        sed -i -e "s/#queue/$QUEUE/" $script_path
        sed -i -e "s/#inputSeqrunDir/${INPUT_SEQRUN_DIR//\//\\/}/" $script_path
	sed -i -e "s/#removeBams/$REMOVE_BAMS/" $script_path
		
        local log_path=`echo $script_path | perl -pe 's/\.sh/\.log/g'`

        echo "`$NOW`submitting fastq splitting job:" >> $SETUP_LOG
        echo "`$NOW`submitSplitFastq.$project.sh" >> $SETUP_LOG
        echo -n "`$NOW`" >> $SETUP_LOG
        echo "`$NOW`dependencies $splitfastq_dependencies" >> $SETUP_LOG

        echo "qsub -W depend=afterok:$splitfastq_dependencies -o $log_path $script_path"
        local job_id=`qsub -W depend=$splitfastq_dependencies -o $log_path $script_path`
        echo $job_id >> $SETUP_LOG
}


#creates job scripts
function submitTOPHATJobs {
 
        local path_sample_sheet_reformatted=$1
        local project=$2
 
        #create deployment directories
 
        local ms_analysis_dir=$DATA_VOL_IGF/runs/$project/tophat/$TODAY/multisample
        mkdir -m 770 -p $ms_analysis_dir
	chmod -R 770 $DATA_VOL_IGF/runs/$project
 	local path_scripts_dir=$DATA_VOL_IGF/runs/$project/tophat/$TODAY
 	chmod 770 $path_scripts_dir
 
        SETUP_LOG=$path_scripts_dir/setup.log
        echo "$project" >> $SETUP_LOG
        #create summary directory on deployment server
        local tophat_summary_deployment=$DEPLOYMENT_BASE_DIR/project/$project/tophat/$TODAY
        ssh $DEPLOYMENT_SERVER "mkdir -p -m 775 $tophat_summary_deployment" < /dev/null
        ssh $DEPLOYMENT_SERVER "chmod -R 775 $DEPLOYMENT_BASE_DIR/project/$project/tophat" < /dev/nul
        scp -r ${TOPHAT_SCRIPTS_DIR}/../../resources/images/error.png $DEPLOYMENT_SERVER:$tophat_summary_deployment/ < /dev/null
        scp -r ${TOPHAT_SCRIPTS_DIR}/../../resources/images/tick.png $DEPLOYMENT_SERVER:$tophat_summary_deployment/ < /dev/null
        scp -r ${TOPHAT_SCRIPTS_DIR}/../../resources/images/warning.png $DEPLOYMENT_SERVER:$tophat_summary_deployment/ < /dev/null
        ssh $DEPLOYMENT_SERVER "chmod -R 664 $tophat_summary_deployment/*png" < /dev/null
 
 
        #variables to store job dependencies
        mapping_dependencies="afterok"
 	local rowcount=0
 	while read line
 	do
        	#skip sample sheet header
               	rowcount=$(( $rowcount + 1 ))
                if [ "$rowcount" -eq "1" ]
                then
                     continue
                fi
 
                local project_name=`echo $line | cut -f10 -d ',' | perl -pe 's/\s//g'`
                #skip project not in current lane...
                if [ "$project_name" != "$project" ]
                then
                	continue
                fi
                local sample_lane=`echo $line | cut -f2 -d ','|cut -f1 -d'_' | perl -pe 's/\s//g'`
 		while read row
 		do
 			local lane=`echo $row | cut -f1 -d ','|cut -f1 -d'_'`

                      	if [ "$sample_lane" -ne "$lane" ]
                        then
                            continue
                        fi
 
 			local bcl2fastq_job_id=`echo $row | cut -f2 -d ','`
 			local jobIdcount=`echo $mapping_dependencies | grep $bcl2fastq_job_id | wc -l`
 			if [ "$jobIdcount" -eq "0" ];then
                        	mapping_dependencies="$mapping_dependencies:$bcl2fastq_job_id"
 			fi
 
 		done <$BCL2FASTQ_JOB_ID_LIST
 
	done <$path_sample_sheet_reformatted
 
 	local project_rawdata_dir=$DATA_VOL_IGF/rawdata/$project
        ########################################
        #submit splitting job
        echo "`$NOW`submitting job to map fastq files"
 
 
        local script_path=$path_scripts_dir/submitTophat2.$project.sh
        cp $TOPHAT_SCRIPTS_DIR/submitTophat2.sh $script_path
        chmod 770 $script_path
 
        sed -i -e "s/#fastqGenDate/$TODAY/" $script_path
        sed -i -e "s/#dataVolIgf/${DATA_VOL_IGF//\//\\/}/" $script_path
        sed -i -e "s/#pathSampleSheetReformatted/${PATH_SAMPLE_SHEET_REFORMATTED//\//\\/}/" $script_path
        sed -i -e "s/#pathProjectTagDir/${project_rawdata_dir//\//\\/}/" $script_path
        sed -i -e "s/#mseqRunDate/$SEQRUN_DATE/" $script_path
        sed -i -e "s/#mseqRunName/$SEQRUN_NAME/" $script_path
        sed -i -e "s/#mprojectTag/$project/" $script_path
        sed -i -e "s/#TophatScriptDir/${TOPHAT_SCRIPTS_DIR//\//\\/}/" $script_path
        sed -i -e "s/#sdeploymentServer/$DEPLOYMENT_SERVER/" $script_path
        sed -i -e "s/#deploymentBaseDir/${DEPLOYMENT_BASE_DIR//\//\\/}/" $script_path
        sed -i -e "s/#queue/$QUEUE/" $script_path
        sed -i -e "s/#inputSeqrunDir/${INPUT_SEQRUN_DIR//\//\\/}/" $script_path
 		
        local log_path=`echo $script_path | perl -pe 's/\.sh/\.log/g'`
 
        echo "`$NOW`submitting fastq mapping job:" >> $SETUP_LOG
        echo "`$NOW`submitTophat2.$project.sh" >> $SETUP_LOG
        echo -n "`$NOW`" >> $SETUP_LOG
        echo "`$NOW`dependencies $mapping_dependencies" >> $SETUP_LOG

        echo "qsub -W depend=afterok:$mapping_dependencies -o $log_path -j oe $script_path"
        local job_id=`qsub -W depend=$mapping_dependencies -o $log_path -j oe $script_path`
        echo $job_id >> $SETUP_LOG
}



#popolate Database with data of the RUN
function popolateDB {

	SETUP_LOG=$PATH_RUN_DIR_BCL2FASTQ/setup.log
	local single_read='T'

	echo " popolate DB ${SERP_DEPENDENCIES}"
 	local script_path=$PATH_RUN_DIR_BCL2FASTQ/serp.$SEQRUN_NAME.pl
        cp ${SERP_SCRIPT} $script_path
        chmod 770 $script_path

	echo "TEST PIRED END $pairedEnd"
 	if [ $pairedEnd -eq 1 ]
 	then
		single_read='F'
	fi

        sed -i -e "s/#runDate/$TODAY/" $script_path
        sed -i -e "s/#inputSeqRun/$SEQRUN_NAME/" $script_path
        sed -i -e "s/#singleRead/$single_read/" $script_path

        local log_path=`echo $script_path | perl -pe 's/\.pl/\.log/g'`

        echo "`$NOW`popolating database job:" >> $SETUP_LOG
        echo "`$NOW`serp.$project.pl" >> $SETUP_LOG
        echo -n "`$NOW`" >> $SETUP_LOG
        echo "`$NOW`dependencies ${SERP_DEPENDENCIES}" >> $SETUP_LOG

        echo "qsub -W depend=${SERP_DEPENDENCIES} -o $log_path -j oe $script_path"
        local job_id=`qsub -W depend=${SERP_DEPENDENCIES} -o $log_path -j oe $script_path`
        echo $job_id >> $SETUP_LOG
}
						
#get run name, run date and flow cell ID

SEQRUN_NAME=`basename $INPUT_SEQRUN_DIR`
SEQRUN_DATE=`echo $SEQRUN_NAME | perl -e 'while(<>){ if(/^(\d{2})(\d{2})(\d{2})_/){ print "20$1-$2-$3"; }}'`;
FLOWCELL_ID=`echo $SEQRUN_NAME | cut -f4 -d '_' | perl -e '$prefix=<>; chomp($prefix); if(!($prefix =~ /-/)){ $prefix=~s/^[AB]//; } print $prefix'`

CUSTOMERS_RUNS_FILE=$INPUT_SEQRUN_DIR/customerInfo.csv


#DEPLOYMENT STRUCTURE
#creates deployment results structure on eliot webserver
while read row
do
        project_tag=`echo $row|cut -d ',' -f1`
        #better to do on cx1 on the cluster
        #checks if the project directory already exists in the web server
	if ssh $DEPLOYMENT_SERVER "[ -d /$DEPLOYMENT_PATH/$project_tag ]" < /dev/null ;then
               	echo "directory " $DEPLOYMENT_PATH/$project_tag " exists.";
		#if fastq directory already exists must add the new files there
		#ssh $DEPLOYMENT_SERVER "rm $DEPLOYMENT_PATH/$project_tag/fastq"
	else
		#creates password proctected project_tag dir
		echo "`$NOW` directory " $DEPLOYMENT_PATH/$project_tag " does not exist. Creates password proctected";
		ssh $DEPLOYMENT_SERVER "mkdir -m 775 -p $DEPLOYMENT_PATH/$project_tag" < /dev/null
	fi
	#added in any case I write the secure files
        project_usr=`echo $row|cut -d ',' -f3`
        #for Test
        #echo "USER: $project_usr"
        project_passwd=`echo $row|cut -d ',' -f4`
        #for Test
        #echo "PASSW: $project_passwd"
	cp $HTACCESS_TML $HTACCESS
	cp $HTPASSWD_TML ${HTPASSWD}.$project_tag
	#configure .htaccess
	sed -i -e "s/#project_tag/$project_tag/" $HTACCESS
	sed -i -e "s/#customerUsername/$project_usr/" $HTACCESS
	scp $HTACCESS $DEPLOYMENT_SERVER:$DEPLOYMENT_PATH/$project_tag
	scp $HTPASSWD.${project_tag} $DEPLOYMENT_SERVER:$DEPLOYMENT_PATH/$project_tag/$HTPASSWD < /dev/null
	ssh $DEPLOYMENT_SERVER "chmod 775 $DEPLOYMENT_PATH/$project_tag/$HTACCESS" < /dev/null
	ssh $DEPLOYMENT_SERVER "chmod 644 $DEPLOYMENT_PATH/$project_tag/$HTPASSWD" < /dev/null
	ssh $DEPLOYMENT_SERVER "cd $DEPLOYMENT_PATH/$project_tag;htpasswd -bm .htpasswd $project_usr $project_passwd" < /dev/null
	# now remove local password protection file
	rm $HTACCESS
	rm ${HTPASSWD}.$project_tag
done <$CUSTOMERS_RUNS_FILE

#extract sample sheet name from run name:
#HiSeq run: the sample sheet is named after the flowcell ID; the flowcell ID
#is the last token of the run name preceeded by A or B depending on wether the
#flow cell was run as flowcell A or B on the machine: <[A|B]><flowcell_id>.csv
#MiSeq run: MiSeq runs are detected by the hyphen in the last token of the run name;
#for MiSeq runs the sample sheet is named SampleSheet.csv 
#SAMPLE_SHEET_PREFIX=`echo $SEQRUN_NAME | cut -f4 -d '_' | perl -e '$prefix=<>; chomp($prefix); if($prefix =~ /-/){ $prefix=SampleSheet;  }else{ $prefix=~s/^[AB]//; } print $prefix'`

PATH_RUN_DIR_BCL2FASTQ=$DATA_VOL_IGF/runs/seqrun/$SEQRUN_NAME/bcl2fastq/$TODAY
PATH_RESULTS_DIR_BCL2FASTQ=$DATA_VOL_IGF/results/seqrun/$SEQRUN_NAME/bcl2fastq/$TODAY				
PATH_RAWDATA_DIR=$DATA_VOL_IGF/rawdata

mkdir -m 770 -p $PATH_RUN_DIR_BCL2FASTQ
chmod -R 770 $DATA_VOL_IGF/runs/seqrun/$SEQRUN_NAME


#we need a bcl2fastq job-list file for split_Fastq_dependencies, but MOST IMPORTANTLY, knowing the lane that belonged to a certain bcl2fastq job enables
#us to know which samples are in that lane; i.e, correspond bcl2fast dependency with the respective samples

#initialise job ID lisr for split fastq dependencies
BCL2FASTQ_JOB_ID_LIST=$PATH_RUN_DIR_BCL2FASTQ/bcl2fastq.$SEQRUN_NAME.job_id_list.csv
echo -n "" > $BCL2FASTQ_JOB_ID_LIST	


# BCL2FASTQ RUNS
################

#get lanes
#MiSeq sample sheets are detected by the missing "Lane" column.
#If the column is not present it is assumed that the sample sheet is a MiSeq sample sheet and lane equals 1, should be file for NextSeq too
# Rewriting samplesheet processing in python
LANES=`cut -f1 -d ',' $INPUT_SEQRUN_DIR/SampleSheet.csv | perl -e 'while(<>){ if(/\[Data\]/){ $_=<>; if(/^Lane/){ while(<>){ print; }} else { print "1\n"; } }}' | sort | uniq`

## parse sample sheet into format compatible with bcl2fastq format
## in case the sample sheet has been processed on Windows.. .
dos2unix $INPUT_SEQRUN_DIR/SampleSheet.csv

## convert sample sheet
PATH_SAMPLE_SHEET=$INPUT_SEQRUN_DIR/SampleSheet.csv
PATH_SAMPLE_SHEET_REFORMATTED=$PATH_RUN_DIR_BCL2FASTQ/$FLOWCELL_ID.csv

## new samplesheet reformat script
$BASE_PYTHON_DIR/scripts/SampleSheet/reformatSampleSheet.py -i $PATH_SAMPLE_SHEET -o $PATH_SAMPLE_SHEET_REFORMATTED

## $BASEDIR/reformatSampleSheet.pl $PATH_SAMPLE_SHEET $PATH_SAMPLE_SHEET_REFORMATTED
##  gets the lanes where single index is used in mixed indexes run
## remove second no index (it effects only mixed indexes run)

#mixedIndexLanes=`cat $PATH_SAMPLE_SHEET_REFORMATTED | grep ".*[A|C|G|T]-NNNNNNNN" | cut -d "," -f 2| sort | uniq |  perl -pe 's/\s/-/g'`
#echo "mixedIndexLanes= $mixedIndexLanes"

## reads from RunInfo if it is Single-Read or Paired-End Sequencing RUN 
pairedEnd=`cat $INPUT_SEQRUN_DIR/RunInfo.xml | grep "Read Number=\"4\"" | wc -l`

## get sequencing type for following mapping
sequence_type=`echo $PATH_SAMPLE_SHEET_REFORMATTED | cut -f4 -d ',' | cut -f3 -d ':' | sort | uniq`
echo "sequence_type=$sequence_type"

#sed -i 's/\([A|C|G|T]\+\)N*\(-*\)\([A|C|G|T]*\)N*/\1\2\3/g' $PATH_SAMPLE_SHEET_REFORMATTED
#sed -i 's/-,/,/g' $PATH_SAMPLE_SHEET_REFORMATTED

## create the appropriate index for lane statistics
cp $TEMPLATE_PATH/lanes.htm $PATH_RUN_DIR_BCL2FASTQ/index.html
chmod 770 $PATH_RUN_DIR_BCL2FASTQ/index.html

# removing previous sub samplesheets
rm ${PATH_SAMPLE_SHEET_REFORMATTED}_{1..8}_*

# generate current sub samplesheets
$BASE_PYTHON_DIR/scripts/SampleSheet/divide_samplesheet.py --samplesheet_file $PATH_SAMPLE_SHEET_REFORMATTED --output_dir $PATH_RUN_DIR_BCL2FASTQ


for LANE in $LANES
do
#	
	#min_idx_length=100
        #data_block=0             ## new samplesheet contain extra headers
	#while read line
        #do
        #        if [[ $line =~ '[Data]'*]]
        #        then
        #          data_block=1
                  
        #          continue
        #        fi
        #        if [ $data_block == 1 ]
        #        then
	#          sample_lane=`echo $line | cut -f2 -d ',' | perl -pe 's/\s//g'`
	#	  if [ $sample_lane == $LANE ]
	#	  then
	#	  	#adapter_type=`echo $line  | cut -d ',' -f4|cut -d ':' -f4 | perl -pe 's/\s//g'` 	
	#		#index=`echo $line | cut -f5 -d ',' | perl -pe 's/\s//g'`
	#		#min_idx_length=${#index}
	#		## generate SampleSheet for each different index length
	#		echo $line >>   ${PATH_SAMPLE_SHEET_REFORMATTED}_${LANE}_${min_idx_length}
	#       	  fi
        #        fi
	#done <$PATH_SAMPLE_SHEET_REFORMATTED

	#header=`head -1 $PATH_SAMPLE_SHEET_REFORMATTED`	
	#sed -i '1s/^/'$header'\n/'  ${PATH_SAMPLE_SHEET_REFORMATTED}_${LANE}_*

	# foreach different SampleSheet submit bcl2fastq job (different mask)
	for SampleSheet in `ls --color=never ${PATH_SAMPLE_SHEET_REFORMATTED}_${LANE}_*`
	do
		#lane_idx_length=`echo $SampleSheet | cut -d "/" -f9 | cut -d "_" -f2,3`
		lane_idx_length=`echo $SampleSheet | xargs -i basename {} | cut -d "_" -f2,3`
		#mylane=`echo $lane_idx_length | cut -d "_" -f1`
		sed -i -e "s/#addRow/<br> <li> LANE ${mylane} <ul> <li><a href=lane${lane_idx_length}\/All.htm>All<\/a><\/li> <li><a href=lane${lane_idx_length}\/Demultiplex_Stats.htm>Demultiplex_Stats<\/a><\/li> <li><a href=lane${lane_idx_length}\/IVC.htm>IVC<\/a><\/li> <\/ul> <\/li>\n#addRow/" $PATH_RUN_DIR_BCL2FASTQ/index.html 
		#submitbcl2fastqJobs $INPUT_SEQRUN_DIR $SampleSheet $SampleSheet $lane_idx_length $adapter_type $mixedIndexLanes
                adapter_type=''
                mixedIndexLanes=''
		submitbcl2fastqJobs $INPUT_SEQRUN_DIR $SampleSheet $lane_idx_length $adapter_type $mixedIndexLanes
	done;
done
sed -i -e "s/#addRow//" $PATH_RUN_DIR_BCL2FASTQ/index.html 

cat ${PATH_SAMPLE_SHEET_REFORMATTED}_*_* | sort -n | uniq  > $PATH_SAMPLE_SHEET_REFORMATTED

# DEPLOYS FASTQ ON IRODS
submitIrodsDeployFastq $PATH_SAMPLE_SHEET_REFORMATTED

# FASTQC RUNS
#############
submitfastqcJobs $PATH_SAMPLE_SHEET_REFORMATTED

#exit 0
popolateDB


# MAPPING RUNS
##############
submitMappingJob $PATH_SAMPLE_SHEET_REFORMATTED

