#!/bin/bash
#
# sets up directory structure and generates, configures and submits
# scripts to run bcl2fastq conversion, generate fastqc reports, split fastq files(bwa), and carry out bwa mapping, cram file generation on an Illumnia run folder
#

#CONFIGURATION
##############

#now
NOW="date +%Y-%m-%d%t%T%t"

#today
TODAY=`date +%Y-%m-%d`
						

#returns absolute path to qfastqc directory, not changing your current directory
BASEDIR="$( cd "$( dirname "$0" )" && pwd )"
USAGE="$BASEDIR/qbcl2fastq.usage"			
DATA_VOL_IGF=/project/tgu
DEPLOYMENT_SERVER=eliot.med.ic.ac.uk
DEPLOYMENT_BASE_DIR=/www/html/report
QUEUE=pqcgi

#BCL2FASTQ
WALLTIME_HOURS_PER_JOB_BCL2FASTQ=24
TMP_SPACE_GB_BCL2FASTQ=100
THREADS_PER_RUN_BCL2FASTQ=2

#SPLIT FASTQ
FASTQ_FILE_SIZE_KB=20000000
THREADS_PER_RUN_SPLITFASTQ=4
WALLTIME_HOURS_SPLITFASTQ=72

#BWA
READS_PER_RUN_BWA=10000000
THREADS_PER_RUN_BWA=2
PATTERN_READ_1=_R1_
PATTERN_READ_2=_R2_
WALLTIME_HOURS_PER_RUN_BWA=30

FASTQC_SCRIPT_DIR=$BASEDIR/../../../../workflows/shell/pre_processing/fastqc
WORKFLOWS_RESOURCES_DIR=$BASEDIR/../../../../workflows/shell/resources

GROUP_VOL_CGI=/groupvol/cgi
BWA_SCRIPTS_DIR=$BASEDIR/../../../../workflows/shell/mapping/bwa
SPLIT_FASTQ_SCRIPT_DIR=$BASEDIR/../../../../workflows/shell/mapping/bwa/

SPECIES=hsapiens
ASSEMBLY=hs37d5
SEQUENCE_TYPE=dna



SAMTOOLS_VERSION=1.1
BWA_VERSION=0.7.5a




#COMMAND LINE ARGS
##################

while getopts "i:s:a:t:h" option; do
case "$option" in
	i) INPUT_SEQRUN_DIR="$OPTARG";;
	s) SPECIES="$OPTARG";;
	a) ASSEMBLY="$OPTARG";;
	t) SEQUENCE_TYPE="$OPTARG";;
	h) cat "$USAGE"; exit 0;;
	[?]) cat "$USAGE"; exit 1;;
esac
done

#check if required arguments are missing
if [ -z $INPUT_SEQRUN_DIR ]
then
	cat "$USAGE"
	exit 1
fi

REFERENCE_FASTA=$DATA_VOL_IGF/resources/reference/fasta/eukaryote/$SPECIES/$ASSEMBLY/$ASSEMBLY.fa
REFERENCE_DICT=$DATA_VOL_IGF/resources/reference/dict/eukaryote/$SPECIES/$ASSEMBLY/$ASSEMBLY.dict
REFERENCE_FASTA_INDEX=$DATA_VOL_IGF/resources/reference/index/bwa/eukaryote/$SPECIES/$ASSEMBLY/$ASSEMBLY.fa



if [[ $SEQUENCE_TYPE = "rna" ]]
then
	REFERENCE_INDEX_PREFIX=$DATA_VOL_IGF/resources/reference/index/bowtie2/eukaryote/$SPECIES/$ASSEMBLY/$ASSEMBLY
fi





#FUNCTIONS
##########

#creates job scripts
function submitbcl2fastqJobs {
	
	#bcl2Fastq variables
	local seqrun_directory=$1	
	local lane=$2



	#BCL2FASTQ CONVERSION
	#####################
	
	echo -n $lane >> $BCL2FASTQ_JOB_ID_LIST

	local bcl2fastq_script=$PATH_RUN_DIR_BCL2FASTQ/bcl2Fastq.$SEQRUN_NAME.${lane}_${read}.sh
	cp $BASEDIR/bcl2fastq.sh $bcl2fastq_script
	chmod 770 $bcl2fastq_script

	sed -i -e "s/#walltimeHours/$WALLTIME_HOURS_PER_JOB/" $bcl2fastq_script
	sed -i -e "s/#threads/$THREADS_PER_RUN_BCL2FASTQ/" $bcl2fastq_script
	sed -i -e "s/#runName/$SEQRUN_NAME/" $bcl2fastq_script
	sed -i -e "s/#lane/$lane/" $bcl2fastq_script
	sed -i -e "s/#tmpSpace/$TMP_SPACE_GB_BCL2FASTQ/" $bcl2fastq_script
	sed -i -e "s/#pathSeqRunDir/${seqrun_directory//\//\\/}/" $bcl2fastq_script
	sed -i -e "s/#dataVolIgf/${DATA_VOL_IGF//\//\\/}/" $bcl2fastq_script

	local log_path=`echo $bcl2fastq_script | perl -pe 's/\.sh/\.log/g'`
	echo "`$NOW`submitting bcl2fastq job:" 
	echo "`$NOW`bcl2Fastq.$SEQRUN_NAME.$lane.sh"
	echo -n "`$NOW`"				
	
	
	echo "qsub -q $QUEUE -o $log_path $bcl2fastq_script"
	local job_id=`qsub -o $log_path $bcl2fastq_script`	
	echo ",$job_id" >> $BCL2FASTQ_JOB_ID_LIST			

}


function submitfastqcJobs {			

	local seqrun_directory=$1

	local flowcell_id=`echo $SEQRUN_NAME | cut -f4 -d '_' | perl -e '$flowcell_id=<>; $flowcell_id=substr($flowcell_id,1,9); print "$flowcell_id\n"'`

	#create directory structure for each project in sample sheet

	for project in `sed 1d $seqrun_directory/$flowcell_id.csv| cut -d ',' -f10  | perl -e 'while(<>){ s/\s//g; print "$_\n";}' | sort | uniq`
	do
	
		#create and set permissions for analysis project parent directory
		mkdir -m 770 -p $DATA_VOL_IGF/analysis/$project/fastqc/$TODAY
	
		#create and set permissions for results project parent directory
		mkdir -m 770 -p $DATA_VOL_IGF/results/$project/fastqc

		#create and set permissions for multisample analysis directory			
		mkdir -m 770 -p $DATA_VOL_IGF/analysis/$project/fastqc/$TODAY/multisample		

		mkdir -m 770 -p $DATA_VOL_IGF/analysis/$project/fastqc/$TODAY/multisample/run	
		local ms_analysis_dir=$DATA_VOL_IGF/analysis/$project/fastqc/$TODAY/multisample
		
		#create and set permissions for multisample results directory
		mkdir -m 770 -p $DATA_VOL_IGF/results/$project/fastqc/multisample

		local job_id_list=$ms_analysis_dir/job_id_list.txt
		echo -n "" > $job_id_list
		chmod 660 $job_id_list	
		#create summary directory on deployment server
		local fastqc_summary_deployment=$DEPLOYMENT_BASE_DIR/project/$project/fastqc
		ssh $DEPLOYMENT_SERVER "mkdir -p -m 775 $fastqc_summary_deployment"  > /dev/null 2>&1
		scp -r ${FASTQC_SCRIPT_DIR}/../../resources/images/error.png $DEPLOYMENT_SERVER:$fastqc_summary_deployment/ > /dev/null 2>&1
		scp -r ${FASTQC_SCRIPT_DIR}/../../resources/images/tick.png $DEPLOYMENT_SERVER:$fastqc_summary_deployment/ > /dev/null 2>&1
		scp -r ${FASTQC_SCRIPT_DIR}/../../resources/images/warning.png $DEPLOYMENT_SERVER:$fastqc_summary_deployment/ > /dev/null 2>&1
		ssh $DEPLOYMENT_SERVER "chmod -R 664 $fastqc_summary_deployment/*png" > /dev/null 2>&1


	done

	while read row
	do

		local lane=`echo $row | cut -f1 -d ','`
		local bcl2fastq_job_id=`echo $row | cut -f2 -d ','`
		
			
		local rowcount=0
		while read line
		do
			
			#skip sample sheet header
			rowcount=$(( $rowcount + 1 )) 
			if [ "$rowcount" -eq "1" ]
			then
				continue
			fi

			#skip samples not in current lane...
			local sample_lane=`echo $line | cut -f2 -d ',' | perl -pe 's/\s//g'`
			if [ "$sample_lane" -ne "$lane" ]
			then
				continue
			fi

			#..for samples in current lane...
			local sample_name=`echo $line | cut -f3 -d ',' | perl -pe 's/\s//g'`
			local index=`echo $line | cut -f5 -d ',' | perl -pe 's/\s//g'`
			local project_name=`echo $line | cut -f10 -d ',' | perl -pe 's/\s//g'`			
							
			local path_reads_dir=$DATA_VOL_IGF/rawdata/$project_name/fastq/$sample_name
			local fastq_read1=${SEQRUN_NAME}_${index}_L00${lane}_R1_001.fastq.gz
			local fastq_read2=${SEQRUN_NAME}_${index}_L00${lane}_R2_001.fastq.gz

			#create output directory for the QC reports for each file
			echo "`$NOW`creating output directory for QC reports of sample $sample_name "
			local project_analysis_dir=$DATA_VOL_IGF/analysis/$project_name/fastqc/$TODAY
			local path_run_dir=$project_analysis_dir/$sample_name/run
			local project_result_dir=$DATA_VOL_IGF/results/$project_name/fastqc
			local qc_report_outputdir=$project_result_dir/$sample_name
			mkdir -m 770 -p $path_run_dir
			mkdir -m 770 -p $qc_report_outputdir
			
			local job_id_list=$ms_analysis_dir/job_id_list.txt

			#create deployment directories for the QC reports for each file
			local fastqc_deployment_path=$DEPLOYMENT_BASE_DIR/project/$project_name/fastqc/$sample_name
			local fastqc_summary_deployment=$DEPLOYMENT_BASE_DIR/project/$project_name/fastqc
	
			#create fastqc script from template
			echo "`$NOW`creating and submitting job scripts for QC of fastq files for sample $sample_name in lane $lane"
		
			#handling each fastq file, in each sample directory
									
			local fastQC_script_path=$path_run_dir/fastQC.$fastq_read1.sh	
			cp $FASTQC_SCRIPT_DIR/fastQC.sh $fastQC_script_path
			chmod 770 $fastQC_script_path
		
			#configure fastqc script
			sed -i -e "s/#pathReadsFastq/${path_reads_dir//\//\\/}/" $fastQC_script_path
			sed -i -e "s/#fastqRead1/${fastq_read1//\//\\/}/" $fastQC_script_path
			sed -i -e "s/#fastqRead2/${fastq_read2//\//\\/}/" $fastQC_script_path
			sed -i -e "s/#pathQcReportDir/${qc_report_outputdir//\//\\/}/" $fastQC_script_path
			sed -i -e "s/#deploymentServer/${DEPLOYMENT_SERVER//\//\\/}/" $fastQC_script_path	
  			sed -i -e "s/#deploymentPath/${fastqc_deployment_path//\//\\/}/" $fastQC_script_path	
			sed -i -e "s/#summaryPath/${fastqc_summary_deployment//\//\\/}/" $fastQC_script_path

		  	#submit job 
		  	log_output_path=`echo $fastQC_script_path | perl -pe 's/\.sh/\.log/g'`
			#for testing
			echo "qsub -q $QUEUE -W depend=afterok:$bcl2fastq_job_id -o $log_output_path $fastQC_script_path"
		  	job_id=`qsub -q $QUEUE -W depend=afterok:$bcl2fastq_job_id -o $log_output_path $fastQC_script_path`
			echo "`$NOW`Read pair: $fastq_read1 AND $fastq_read2"		
			echo "`$NOW`Job ID:$job_id"
			echo -e "$job_id" >> $job_id_list				

		done <$seqrun_directory/$flowcell_id.csv

	done <$BCL2FASTQ_JOB_ID_LIST

	for project in `sed 1d $seqrun_directory/$flowcell_id.csv| cut -d ',' -f10  | perl -e 'while(<>){ s/\s//g; print "$_\n";}' | sort | uniq`
	do

		echo "`$NOW`creating and submitting job script for summary of results"
		#create summary script from template

		local ms_analysis_dir=$DATA_VOL_IGF/analysis/$project/fastqc/multisample
		local ms_result_dir=$DATA_VOL_IGF/results/$project/fastqc/multisample
		local summary_path=$ms_analysis_dir/run/summary.$project.pl
		cp $FASTQC_SCRIPT_DIR/summary_fastqc.pl $summary_path
		chmod 770 $summary_path

		local path_fastq_dir=$DATA_VOL_IGF/results/$project/fastq
		local project_analysis_dir=$DATA_VOL_IGF/analysis/$project/fastqc
		local project_result_dir=$DATA_VOL_IGF/results/$project/fastqc
		local fastqc_summary_deployment=$DEPLOYMENT_BASE_DIR/project/$project/fastqc

		#configure summary script, it will be executed from fastqc script
		sed -i -e "s/#pathReadsFastq/${path_fastq_dir//\//\\/}/" $summary_path
		sed -i -e "s/#pathAnalysisDir/${project_analysis_dir//\//\\/}/" $summary_path
		sed -i -e "s/#pathReportsDir/${project_result_dir//\//\\/}/" $summary_path
		sed -i -e "s/#pathMSReportsDir/${ms_result_dir//\//\\/}/" $summary_path
		sed -i -e "s/#deploymentServer/$DEPLOYMENT_SERVER/" $summary_path
		sed -i -e "s/#summaryDeployment/${fastqc_summary_deployment//\//\\/}/" $summary_path

		#summary is on hold until fastqc runs are completed 
		#collect fastqc job ids for dependency variable
		local job_id_list=$ms_analysis_dir/job_id_list.txt
		local summary_job_dependency="afterany"
		for job_id in `grep 'cx1' $job_id_list`
		do

			job_id=`basename $job_id .cx1b`
			summary_job_dependency="$summary_job_dependency:$job_id"

		done

		#submit job 
		local log_output_path=`echo $summary_path | perl -pe 's/\.pl/\.log/g'`
		#for testing
		echo "qsub -q $QUEUE -W depend=$summary_job_dependency -o $log_output_path -j oe $summary_path"
		local job_id=`qsub -q $QUEUE -W depend=$summary_job_dependency -o $log_output_path -j oe $summary_path`
		echo "`$NOW`Job ID:$job_id"

	done

}









#creates job scripts
function submitBWAMEMJobs {

	local seqrun_directory=$1
	local reference_fasta_index=$2
	local flowcell_id=`echo $SEQRUN_NAME | cut -f4 -d '_' | perl -e '$flowcell_id=<>; $flowcell_id=substr($flowcell_id,1,9); print "$flowcell_id\n"'`
	
	echo "`$NOW`setting up BWA mapping run(s)... " >> $SETUP_LOG

	#create deployment directories
	for project in `sed 1d $seqrun_directory/$flowcell_id.csv| cut -d ',' -f10  | perl -e 'while(<>){ s/\s//g; print "$_\n";}' | sort | uniq`
	do
	
		mkdir -m 770 -p $DATA_VOL_IGF/analysis/$project/bwa/$TODAY/multisample	
		local ms_analysis_dir=$DATA_VOL_IGF/analysis/$project/bwa/$TODAY/multisample
		
		#initialise BWA job id list
		local bwa_job_id_list=$ms_analysis_dir/job_id_list.txt
		echo -n "" > $bwa_job_id_list
		chmod 660 $bwa_job_id_list

		#create summary directory on deployment server
		local bwa_summary_deployment=$DEPLOYMENT_BASE_DIR/project/$project/bwa/$TODAY
		ssh $DEPLOYMENT_SERVER "mkdir -p -m 775 $bwa_summary_deployment" > /dev/null 2>&1
		scp -r ${BWA_SCRIPTS_DIR}/../../resources/images/error.png $DEPLOYMENT_SERVER:$bwa_summary_deployment/ > /dev/null 2>&1
		scp -r ${BWA_SCRIPTS_DIR}/../../resources/images/tick.png $DEPLOYMENT_SERVER:$bwa_summary_deployment/ > /dev/null 2>&1
		scp -r ${BWA_SCRIPTS_DIR}/../../resources/images/warning.png $DEPLOYMENT_SERVER:$bwa_summary_deployment/ > /dev/null 2>&1
		ssh $DEPLOYMENT_SERVER "chmod -R 664 $bwa_summary_deployment/*png" > /dev/null 2>&1

	done



	while read row
	do


		local lane=`echo $row | cut -f1 -d ','`
		local bcl2fastq_job_id=`echo $row | cut -f2 -d ','`			

		local rowcount=0
		while read line
		do
			
			#skip sample sheet header
			rowcount=$(( $rowcount + 1 )) 
			if [ "$rowcount" -eq "1" ]
			then
				continue
			fi

			#skip samples not in current lane...
			local sample_lane=`echo $line | cut -f2 -d ',' | perl -pe 's/\s//g'`
			if [ "$sample_lane" -ne "$lane" ]
			then
				continue
			fi

			#..for samples in current lane...
			local sample_name=`echo $line | cut -f3 -d ',' | perl -pe 's/\s//g'`
			local index=`echo $line | cut -f5 -d ',' | perl -pe 's/\s//g'`
			local project_name=`echo $line | cut -f10 -d ',' | perl -pe 's/\s//g'`			
							
			local path_reads_dir=$DATA_VOL_IGF/rawdata/$project_name/fastq/$sample_name
			local fastq_read1=${SEQRUN_NAME}_${index}_L00${lane}_R1_001.fastq.gz
			local fastq_read2=${SEQRUN_NAME}_${index}_L00${lane}_R2_001.fastq.gz

			local fastq_read1_no_ext=`basename $fastq_read1 .gz`
			local fastq_read2_no_ext=`basename $fastq_read2 .gz`

			#get reference FASTA file names
			local reference_fasta_name=`basename $reference_fasta_index .gz` 			

			#get reference FASTA directory path
			local path_reference_fasta_dir=`dirname $reference_fasta_index`
		
			local path_reference_fasta_no_ext=$path_reference_fasta_dir/$reference_fasta_name
			local path_reference_dict_dir=`echo $path_reference_fasta_dir | perl -pe 's/\/index\/bwa\//\/dict\//'`				
			local reference_dict_name=`basename $reference_fasta_name .fa`
			reference_dict_name=${reference_dict_name}.dict
			local path_reference_dict=$path_reference_dict_dir/$reference_dict_name

			

			echo "`$NOW`creating and submitting job scripts:"

			#create directory structure for merged bam files;
                        #each file will contain the same reads as in the original fastq file
			local path_results_dir=$DATA_VOL_IGF/rawdata/$project_name/bam/$sample_name
			local path_results_dir_cram=$DATA_VOL_IGF/rawdata/$project_name/cram/$sample_name

			if [ ! -e path_results_dir ]; then
				echo "`$NOW`creating BWA results directory $path_results_dir"
				mkdir -m 770 -p $path_results_dir
				echo "`$NOW`creating CRAM directory $path_results_dir_cram"
				mkdir -m 770 -p $path_results_dir_cram
			fi

			local path_run_dir=$DATA_VOL_IGF/analysis/$project_name/bwa/$TODAY/$sample_name
			local path_scripts_dir=$path_run_dir/run
			local path_mapping_dir=$path_run_dir/mapping
			local path_tmp_dir=$path_run_dir/tmp			
			

			if [ ! -e path_run_dir ]; then
				echo "`$NOW`creating BWA analysis directories in $path_results_dir"
				mkdir -m 770 -p $path_run_dir
				mkdir -m 770 -p $path_scripts_dir
				mkdir -m 770 -p $path_mapping_dir
				mkdir -m 770 -p $path_tmp_dir
			fi
			
			
			SETUP_LOG=$path_scripts_dir/setup.log
			echo -n "" > $SETUP_LOG


			#temporary directory for splitfastq results
			local splitfastq_output_dir=$path_tmp_dir/	
			mkdir -m 770 -p $splitfastq_output_dir

			########################################
			#submit splitting jobs

			echo "`$NOW`submitting jobs to split fastq files into $READS_PER_RUN chunks... " >> $SETUP_LOG
	   	
			#variables to store job dependencies
			splitfastq_dependencies=afterok


			for fastq in $path_reads_dir/$fastq_read1 $path_reads_dir/$fastq_read2
			do
		
				local fastq_name=`basename $fastq .gz`
			
				#calculate required temp space
				local file_size_mb=$(( $FASTQ_FILE_SIZE_KB / 1024 ))
				local tmp_space_mb=$(( $file_size_mb * 2 ))

				local script_path=$path_scripts_dir/splitFastq.$fastq_name.sh
				cp $BWA_SCRIPTS_DIR/splitFastq.sh $script_path
				chmod 770 $script_path

				sed -i -e "s/#walltimeHours/$WALLTIME_HOURS_SPLITFASTQ/" $script_path  
				sed -i -e "s/#threads/$THREADS_PER_RUN_SPLITFASTQ/" $script_path
				sed -i -e "s/#tmpSpace/$tmp_space_mb/" $script_path
				sed -i -e "s/#inputFastq/${fastq//\//\\/}/" $script_path
				sed -i -e "s/#outputDir/${splitfastq_output_dir//\//\\/}/" $script_path
				sed -i -e "s/#readsPerChunk/$READS_PER_RUN_BWA/" $script_path

				local log_path=`echo $script_path | perl -pe 's/\.sh/\.log/g'`

				echo "`$NOW`submitting fastq splitting job:" >> $SETUP_LOG
				echo "`$NOW`splitFastq.$fastq_name.sh" >> $SETUP_LOG
				echo -n "`$NOW`" >> $SETUP_LOG

				echo "qsub -W depend=afterok:$bcl2fastq_job_id -o $log_path $script_path"
				local job_id=`qsub -W depend=afterok:$bcl2fastq_job_id -o $log_path $script_path`
				echo $job_id >> $SETUP_LOG

				splitfastq_dependencies="$splitfastq_dependencies:$job_id"

			done;

			#######################

			

			local bwa_summary_results=$DATA_VOL_IGF/analysis/$project_name/bwa/$TODAY
			bwa_summary_deployment=$DEPLOYMENT_BASE_DIR/project/$project/bwa/$TODAY



			local BWA_SUMMARY_RESULTS=$DEPLOYMENT_BASE_DIR/$project_name/bwa/


			#create summary directory on deployment server
			local bwamapping_summary_deployment=$DEPLOYMENT_BASE_DIR/project/$project/bwa
			local output_prefix=$fastq_read1_no_ext.vs.$reference_fasta_name
	
			local bwa_mapping_script=$path_scripts_dir/submitMappingScript.$output_prefix.sh
			cp $BWA_SCRIPTS_DIR/submitMappingScript.sh $bwa_mapping_script
			chmod 770 $bwa_mapping_script
	
			sed -i -e "s/#baseDir/${BWA_SCRIPTS_DIR//\//\\/}/" $bwa_mapping_script
			sed -i -e "s/#setupLog/${SETUP_LOG//\//\\/}/" $bwa_mapping_script
			sed -i -e "s/#pathTmpDir/${splitfastq_output_dir//\//\\/}/" $bwa_mapping_script
			sed -i -e "s/#fastqRead1NoExt/$fastq_read1_no_ext/" $bwa_mapping_script
			sed -i -e "s/#patternRead1/$PATTERN_READ_1/" $bwa_mapping_script
			sed -i -e "s/#patternRead2/$PATTERN_READ_2/" $bwa_mapping_script
			sed -i -e "s/#queue/$QUEUE/" $bwa_mapping_script
			sed -i -e "s/#pathScriptsDir/${path_scripts_dir//\//\\/}/" $bwa_mapping_script
			sed -i -e "s/#pathResultsDir/${path_results_dir//\//\\/}/" $bwa_mapping_script
			sed -i -e "s/#pathMappingDir/${path_mapping_dir//\//\\/}/" $bwa_mapping_script
			sed -i -e "s/#pathReferenceFastaNoExt/${path_reference_fasta_no_ext//\//\\/}/" $bwa_mapping_script
			sed -i -e "s/#pathRunDir/${path_run_dir//\//\\/}/" $bwa_mapping_script
			sed -i -e "s/#today/$TODAY/" $bwa_mapping_script
			sed -i -e "s/#deploymentServer/$DEPLOYMENT_SERVER/" $bwa_mapping_script
			sed -i -e "s/#summaryDeployment/${bwa_summary_deployment//\//\\/}/" $bwa_mapping_script
			sed -i -e "s/#summaryResults/${bwa_summary_results//\//\\/}/" $bwa_mapping_script
			sed -i -e "s/#walltimeHoursPerRun/$WALLTIME_HOURS_PER_RUN_BWA/" $bwa_mapping_script
			sed -i -e "s/#threadsPerRun/$THREADS_PER_RUN_BWA/" $bwa_mapping_script
			sed -i -e "s/#cram2BamConversion/T/"  $bwa_mapping_script
			sed -i -e "s/#samtoolsVersion/$SAMTOOLS_VERSION/" $bwa_mapping_script
			sed -i -e "s/#bwaVersion/$BWA_VERSION/" $bwa_mapping_script
			sed -i -e "s/#pathReferenceSeqDict/${path_reference_dict//\//\\/}/" $bwa_mapping_script
			sed -i -e "s/#pathOutputCram/${path_results_dir_cram//\//\\/}/"  $bwa_mapping_script		
			

			local bwa_log_path=`echo $bwa_mapping_script | perl -pe 's/\.sh/\.log/g'`
	
			echo "`$NOW`submitting submitMappingScript job for $fastq_read1 AND $fastq_read2 :"   >> $SETUP_LOG
			echo "`$NOW`submitMappingScript.$output_prefix.sh"   >> $SETUP_LOG
					
			job_id=`qsub -W depend=$splitfastq_dependencies -o $bwa_log_path $bwa_mapping_script`
			echo "qsub -W depend=$splitfastq_dependencies -o $bwa_log_path $bwa_mapping_script"
			echo "`$NOW`Job ID:$job_id"  >> $SETUP_LOG
				
		done <$seqrun_directory/$flowcell_id.csv

	done <$BCL2FASTQ_JOB_ID_LIST
	
	echo "`$NOW`All done!"
}

						



SEQRUN_NAME=`basename $INPUT_SEQRUN_DIR`
PATH_RUN_DIR_BCL2FASTQ=$DATA_VOL_IGF/analysis/seqrun/bcl2fastq/$TODAY				
mkdir -p $PATH_RUN_DIR_BCL2FASTQ





BCL2FASTQ_JOB_ID_LIST=$PATH_RUN_DIR_BCL2FASTQ/bcl2fastq.$SEQRUN_NAME.job_id_list.txt




# BCL2FASTQ RUNS
#############
for LANE in {1..8}
do
	submitbcl2fastqJobs $INPUT_SEQRUN_DIR $LANE
done

# FASTQC RUNS
#############
submitfastqcJobs $INPUT_SEQRUN_DIR

# BWA RUNS
#############
submitBWAMEMJobs $INPUT_SEQRUN_DIR $REFERENCE_FASTA_INDEX

exit 1

















