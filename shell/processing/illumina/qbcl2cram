#!/bin/bash
#
# sets up directory structure and generates, configures and submits scripts to run
# bcl2fastq conversion, generate fastqc reports, map reads to a reference geneome,
# convert BAM to CRAM files and deploy CRAM files into iRODS on eliot
#

#CONFIGURATION
##############

#now
NOW="date +%Y-%m-%d%t%T%t"

#today
TODAY=`date +%Y-%m-%d`

#returns absolute path to qfastqc directory, not changing your current directory
BASEDIR="$( cd "$( dirname "$0" )" && pwd )"
USAGE="$BASEDIR/qbcl2cram.usage"			
DATA_VOL_IGF=/project/tgu
DEPLOYMENT_SERVER=eliot.med.ic.ac.uk
DEPLOYMENT_BASE_DIR=/www/html/report
QUEUE=pqcgi

# DEPLOYMENT SETTINGS
CUSTOMERS_FILEPATH=/home/igf/docs/igf/users/
DEPLOYMENT_PATH=/www/html/report/project
HTACCESS=.htaccess
HTPASSWD=.htpasswd
TEMPLATE_PATH=$BASEDIR/../../../templates
HTACCESS_TML=$TEMPLATE_PATH/htaccess.tml
HTPASSWD_TML=$TEMPLATE_PATH/htpasswd.tml


#BCL2FASTQ
WALLTIME_HOURS_PER_JOB_BCL2FASTQ=72
TMP_SPACE_GB_BCL2FASTQ=100
THREADS_PER_RUN_BCL2FASTQ=2
PATH_ADAPTER_DIR=$BASEDIR/../../../resources

#TARBCL2FASTQ
TARRESULTS_SCRIPT_DIR=$BASEDIR/tarresultsbcl2fastq.sh
DEPLOYMENT_TAR_BASE_DIR=/data/www/html/report/data

#SPLIT FASTQ
FASTQ_FILE_SIZE_KB=20000000
THREADS_PER_RUN_SPLITFASTQ=4
WALLTIME_HOURS_SPLITFASTQ=72

#BWA
READS_PER_RUN_BWA=10000000
THREADS_PER_RUN_BWA=2
PATTERN_READ_1=_R1_
PATTERN_READ_2=_R2_
WALLTIME_HOURS_PER_RUN_BWA=30

FASTQC_SCRIPT_DIR=$BASEDIR/../../../../workflows/shell/pre_processing/fastqc
WORKFLOWS_RESOURCES_DIR=$BASEDIR/../../../../workflows/shell/resources
GROUP_VOL_CGI=/groupvol/cgi
BWA_SCRIPTS_DIR=$BASEDIR/../../../../workflows/shell/mapping/bwa
SPLIT_FASTQ_SCRIPT_DIR=$BASEDIR/../../../../workflows/shell/mapping/bwa/

BCL2FASTQ_VERSION=1.8.4
SAMTOOLS_VERSION=1.1
BWA_VERSION=0.7.5a


#COMMAND LINE ARGS
##################

IRODS_DEPLOYMENT="F"

while getopts "i:m:dh" option; do
case "$option" in
	i) INPUT_SEQRUN_DIR="$OPTARG";;
	d) IRODS_DEPLOYMENT="T";;				
	h) cat "$USAGE"; exit 0;;
	[?]) cat "$USAGE"; exit 1;;
esac
done

#check if required arguments are missing
if [ -z $INPUT_SEQRUN_DIR ]
then
	cat "$USAGE"
	exit 1
fi


#FUNCTIONS
##########

#creates job scripts
function submitbcl2fastqJobs {
	
	#bcl2Fastq variables
	local seqrun_directory=$1
	local path_sample_sheet=$2
	local path_sample_sheet_reformatted=$3
	local lane=$4
	local adapter_type=$5

	#BCL2FASTQ CONVERSION
	#####################
	
	#make bases mask
	local bases_mask=`$BASEDIR/makeBasesMask.pl $path_sample_sheet $INPUT_SEQRUN_DIR/RunInfo.xml $lane`
			
	#create summary directory on deployment server
	local bcl2fastq_summary_deployment=$DEPLOYMENT_BASE_DIR/seqrun/$SEQRUN_NAME/bcl2fastq/$TODAY
	
	echo -n $lane >> $BCL2FASTQ_JOB_ID_LIST

	local bcl2fastq_script=$PATH_RUN_DIR_BCL2FASTQ/bcl2Fastq.$SEQRUN_NAME.${lane}.sh
	cp $BASEDIR/bcl2fastq.sh $bcl2fastq_script
	chmod 770 $bcl2fastq_script

	sed -i -e "s/#walltimeHours/$WALLTIME_HOURS_PER_JOB_BCL2FASTQ/" $bcl2fastq_script
	sed -i -e "s/#threads/$THREADS_PER_RUN_BCL2FASTQ/" $bcl2fastq_script
	sed -i -e "s/#runName/$SEQRUN_NAME/" $bcl2fastq_script
	sed -i -e "s/#pathSampleSheet/${path_sample_sheet_reformatted//\//\\/}/" $bcl2fastq_script
	sed -i -e "s/#lane/$lane/" $bcl2fastq_script
	sed -i -e "s/#basesMask/$bases_mask/" $bcl2fastq_script
	sed -i -e "s/#tmpSpace/$TMP_SPACE_GB_BCL2FASTQ/" $bcl2fastq_script
	sed -i -e "s/#queue/$QUEUE/" $bcl2fastq_script
	sed -i -e "s/#pathSeqRunDir/${seqrun_directory//\//\\/}/" $bcl2fastq_script
	sed -i -e "s/#dataVolIgf/${DATA_VOL_IGF//\//\\/}/" $bcl2fastq_script
	sed -i -e "s/#bcl2FastqVersion/$BCL2FASTQ_VERSION/" $bcl2fastq_script
	sed -i -e "s/#pathRunDir/${PATH_RUN_DIR_BCL2FASTQ//\//\\/}/" $bcl2fastq_script
	sed -i -e "s/#pathResultsDir/${PATH_RESULTS_DIR_BCL2FASTQ//\//\\/}/" $bcl2fastq_script
	sed -i -e "s/#pathRawDataDir/${PATH_RAWDATA_DIR//\//\\/}/" $bcl2fastq_script
	sed -i -e "s/#deploymentServer/${DEPLOYMENT_SERVER//\//\\/}/" $bcl2fastq_script
	sed -i -e "s/#deploymentPath/${bcl2fastq_summary_deployment//\//\\/}/" $bcl2fastq_script
	sed -i -e "s/#pathAdapterDir/${PATH_ADAPTER_DIR//\//\\/}/" $bcl2fastq_script
	sed -i -e "s/#adapterType/$adapter_type/" $bcl2fastq_script
	sed -i -e "s/#pathTemplateHtm/${TEMPLATE_PATH//\//\\/}/" $bcl2fastq_script

	local log_path=`echo $bcl2fastq_script | perl -pe 's/\.sh/\.log/g'`
	echo -n "`$NOW`submitting bcl2fastq job: " 
	echo "bcl2Fastq.$SEQRUN_NAME.$lane.sh"
	
	local job_id=null
	echo "qsub -o $log_path $bcl2fastq_script"
	job_id=`qsub -o $log_path $bcl2fastq_script`	
	echo ",$job_id" >> $BCL2FASTQ_JOB_ID_LIST			

}

# creates job script to tar bcl2fastqresults
function submitTarResultsBcl2fastq {
                local path_sample_sheet_reformatted=$1
                local bcl2fastq_job_id_list=$2
	
		chmod 660 $bcl2fastq_job_id_list $path_sample_sheet_reformatted
		# for TEST
                #echo $path_sample_sheet_reformatted
                #echo $bcl2fastq_job_id_list

                local rowcount=0
                # lookup lanes for each project_tag
                while read sampleSheetRow
                do
                        #skip sample sheet header
                        rowcount=$(( $rowcount + 1 ))
                        if [ "$rowcount" -eq "1" ]
                        then
                                continue
                        fi

                        #get current 	lane...
                        local sample_lane=`echo $sampleSheetRow | cut -f2 -d ','| perl -pe 's/\s//g'`
                        #get project_tag
                        #local project_name=`echo $sampleSheetRow | cut -f10 -d ','| cut -f1 -d ':' |perl -pe 's/\s//g'`
                        local project_name=`echo $sampleSheetRow | cut -f10 -d ',' |perl -pe 's/\s//g'`
                        #local customer_name=`echo $sampleSheetRow | cut -f10 -d ','| cut -f2 -d ':' |perl -pe 's/\s//g'`
			
			# create a file with sample_lane foreach project_tag
			chmod 770 $PATH_RUN_DIR_BCL2FASTQ
                        echo $sample_lane >>  $PATH_RUN_DIR_BCL2FASTQ/$project_name.prj

                done < $path_sample_sheet_reformatted
		 
		

                for project_file in `ls --color=never $PATH_RUN_DIR_BCL2FASTQ | grep .prj`
                do
			
			#create the appropriate index forlane statistics
			cp $TEMPLATE_PATH/lanes.htm $PATH_RUN_DIR_BCL2FASTQ/index.${project_tag}
                        #for each lane in project_tag
                        local tarresults_job_dependency="afterok"

                        for projectTagRow in `cat $PATH_RUN_DIR_BCL2FASTQ/$project_file | sort | uniq`
                        do
				chmod 660 $PATH_RUN_DIR_BCL2FASTQ/$project_file
                                local lane=`echo $projectTagRow | perl -pe 's/\s//g'`
				# for TEST
                                #echo "# File project "$lane"#"
                                while read jobListRow
                                do
                                        local jobListLane=`echo $jobListRow | cut -f1 -d ',' | perl -pe 's/\s//g'`
					# for TEST
                                        #echo "# Job List -"$jobListLane"-#"
                                        if [ "$jobListLane" -ne "$lane" ]
                                        then
                                                continue
                                        fi
                                        #get job_id and verify if it is based ong project_tag
                                        local bcl2fastq_job_id=`echo $jobListRow | cut -f2 -d ','| perl -pe 's/\s//g'`

                                        #collect job ids for dependency variable
                                        job_id=`basename $bcl2fastq_job_id .cx1b`
                                        tarresults_job_dependency="$tarresults_job_dependency:$job_id"

                                done <$bcl2fastq_job_id_list
				# for TEST
                                #echo $tarresults_job_dependency
				sed '/<!--/{ N; N; s/.*\n\(.*href=lane'${lane}'.*\)\n.*-->.*/\1/; }' $PATH_RUN_DIR_BCL2FASTQ/index.${project_tag} > $PATH_RUN_DIR_BCL2FASTQ/index.${project_tag}.tmp
				mv $PATH_RUN_DIR_BCL2FASTQ/index.${project_tag}.tmp $PATH_RUN_DIR_BCL2FASTQ/index.${project_tag}
                        done
                        #########################################
                        ### create e configure tarJobScript ####
			local project_tag=`basename $project_file .prj`
                        local tarresults_script=$PATH_RUN_DIR_BCL2FASTQ/tarresultsbcl2fastq.${project_tag}.sh
			local deployment_symbolic_link=/www/html/report/project/$project_tag
			local bcl2fastq_summary_deployment=$DEPLOYMENT_BASE_DIR/seqrun/$SEQRUN_NAME/bcl2fastq/$TODAY

                        cp $TARRESULTS_SCRIPT_DIR $tarresults_script
                        chmod 770 $tarresults_script
                        path_project_tag_dir=$DATA_VOL_IGF/rawdata/$project_tag/fastq
                        sed -i -e "s/#pathProjectTagDir/${path_project_tag_dir//\//\\/}/" $tarresults_script
                        sed -i -e "s/#seqRunDate/$SEQRUN_DATE/" $tarresults_script
                        sed -i -e "s/#seqRunName/$SEQRUN_NAME/" $tarresults_script
                        sed -i -e "s/#runDirBcl2Fastq/${PATH_RUN_DIR_BCL2FASTQ//\//\\/}/" $tarresults_script
                        sed -i -e "s/#customerFilePath/${INPUT_SEQRUN_DIR//\//\\/}/" $tarresults_script
                        sed -i -e "s/#projectTag/$project_tag/" $tarresults_script
                        sed -i -e "s/#mailTemplatePath/${TEMPLATE_PATH//\//\\/}/" $tarresults_script
                        sed -i -e "s/#pathToDestination/${path_project_tag_dir//\//\\/}/" $tarresults_script
			sed -i -e "s/#deploymentServer/${DEPLOYMENT_SERVER//\//\\/}/" $tarresults_script
			sed -i -e "s/#deploymentTarPath/${DEPLOYMENT_TAR_BASE_DIR//\//\\/}/" $tarresults_script
			sed -i -e "s/#deploymentSymbolicLink/${deployment_symbolic_link//\//\\/}/" $tarresults_script
			sed -i -e "s/#deploymentSummaryPath/${bcl2fastq_summary_deployment//\//\\/}/" $tarresults_script

			#submit job 
			local log_output_path=`echo $tarresults_script | perl -pe 's/\.sh/\.log/g'`
			echo -n "" > $log_output_path			
			echo -n "`$NOW`submitting tarresult job: " 
			echo "$tarresults_script"


			local job_id=null
		  	job_id=`qsub -q $QUEUE -W depend=$tarresults_job_dependency -o $log_output_path -j oe $tarresults_script`
			echo "qsub -q $QUEUE -W depend=$tarresults_job_dependency -o $log_output_path -j oe $tarresults_script"
			echo "`$NOW`Job ID:$job_id"
			chmod 660 $log_output_path
		done
}


function submitfastqcJobs {			

	local seqrun_directory=$1
	local path_sample_sheet_reformatted=$2

	#create directory structure for each project in sample sheet
	for project in `sed 1d $path_sample_sheet_reformatted | cut -d ',' -f10 |perl -e 'while(<>){ s/\s//g; print "$_\n";}' | sort | uniq`
	do
	
		#create and set permissions for analysis project parent directory
		#project_analysis_dir=$DATA_VOL_IGF/analysis/$project/fastqc/$TODAY
		#mkdir -m 770 -p $project_analysis_dir		
		#mkdir -m 770 -p $project_analysis_dir/multisample		
			
		#create and set permissions for run directory
		project_runs_dir=$DATA_VOL_IGF/runs/$project/fastqc/$TODAY
		mkdir -m 770 -p $project_runs_dir
		chmod -R 770 $DATA_VOL_IGF/runs/$project
		ms_runs_dir=$project_runs_dir/multisample
		mkdir -m 770 -p $ms_runs_dir
						
		#create and set permissions for results project parent directory
		project_results_dir=$DATA_VOL_IGF/results/$project/fastqc/$SEQRUN_DATE
		mkdir -m 770 -p $project_results_dir
		# aggiunto io
		chmod -R 770 $project_results_dir	
		mkdir -m 770 -p $project_results_dir/multisample

		local job_id_list=$ms_runs_dir/job_id_list.$SEQRUN_NAME.txt
		echo -n "" > $job_id_list
		chmod 660 $job_id_list	
		
		#create summary directory on deployment server
		local fastqc_summary_deployment=$DEPLOYMENT_BASE_DIR/project/$project/fastqc/$SEQRUN_DATE
		ssh $DEPLOYMENT_SERVER "mkdir -p -m 775 $fastqc_summary_deployment"  > /dev/null 2>&1
		scp -r ${FASTQC_SCRIPT_DIR}/../../resources/images/error.png $DEPLOYMENT_SERVER:$fastqc_summary_deployment/ > /dev/null 2>&1
		scp -r ${FASTQC_SCRIPT_DIR}/../../resources/images/tick.png $DEPLOYMENT_SERVER:$fastqc_summary_deployment/ > /dev/null 2>&1
		scp -r ${FASTQC_SCRIPT_DIR}/../../resources/images/warning.png $DEPLOYMENT_SERVER:$fastqc_summary_deployment/ > /dev/null 2>&1
		ssh $DEPLOYMENT_SERVER "chmod -R 664 $fastqc_summary_deployment/*png" > /dev/null 2>&1

	done

	#submit FastQC jobs for each sample
	###################################
	
	while read row
	do

		local lane=`echo $row | cut -f1 -d ','`
		local bcl2fastq_job_id=`echo $row | cut -f2 -d ','`
		
			
		local rowcount=0
		while read line
		do
			
			#skip sample sheet header
			rowcount=$(( $rowcount + 1 )) 
			if [ "$rowcount" -eq "1" ]
			then
				continue
			fi

			#skip samples not in current lane...
			local sample_lane=`echo $line | cut -f2 -d ',' | perl -pe 's/\s//g'`
			if [ "$sample_lane" -ne "$lane" ]
			then
				continue
			fi

			#..for samples in current lane...
			local sample_name=`echo $line | cut -f3 -d ',' | perl -pe 's/\s//g'`
			local index=`echo $line | cut -f5 -d ',' | perl -pe 's/\s//g'`
			local project_name=`echo $line | cut -f10 -d ',' | cut -d ':' -f1 | perl -pe 's/\s//g'`			
							
			local path_reads_dir=$DATA_VOL_IGF/rawdata/$project_name/fastq/$SEQRUN_DATE/$sample_name
			local fastq_read1=${SEQRUN_NAME}_${index}_L00${lane}_R1_001.fastq.gz
			local fastq_read2=${SEQRUN_NAME}_${index}_L00${lane}_R2_001.fastq.gz
			
			#create output directory for the QC reports for each file
			echo "`$NOW`creating output directory for QC reports of sample $sample_name "
			local project_runs_dir=$DATA_VOL_IGF/runs/$project_name/fastqc/$TODAY
			local project_results_dir=$DATA_VOL_IGF/results/$project_name/fastqc/$SEQRUN_DATE
			local qc_report_outputdir=$project_results_dir/$sample_name
			
			local ms_runs_dir=$project_runs_dir/multisample

			mkdir -m 770 -p $qc_report_outputdir
			
			local job_id_list=$ms_runs_dir/job_id_list.$SEQRUN_NAME.txt

			#create deployment directories for the QC reports for each file
			local fastqc_deployment_path=$DEPLOYMENT_BASE_DIR/project/$project_name/fastqc/$SEQRUN_DATE/$sample_name
			local fastqc_summary_deployment=$DEPLOYMENT_BASE_DIR/project/$project_name/fastqc/$SEQRUN_DATE
	
			#create fastqc script from template
			echo "`$NOW`creating and submitting job scripts for QC of fastq files for sample $sample_name in lane $lane"
		
			#handling each fastq file, in each sample directory
			local sample_runs_dir=$project_runs_dir/$sample_name
			mkdir -m 770 -p $sample_runs_dir
			
			local fastQC_script_path=$sample_runs_dir/fastQC.$fastq_read1.sh	
			cp $FASTQC_SCRIPT_DIR/fastQC.sh $fastQC_script_path
			chmod 770 $fastQC_script_path			
		
			#configure fastqc script
			sed -i -e "s/#pathReadsFastq/${path_reads_dir//\//\\/}/" $fastQC_script_path
			sed -i -e "s/#fastqRead1/${fastq_read1//\//\\/}/" $fastQC_script_path
			sed -i -e "s/#fastqRead2/${fastq_read2//\//\\/}/" $fastQC_script_path
			sed -i -e "s/#pathQcReportDir/${qc_report_outputdir//\//\\/}/" $fastQC_script_path
			sed -i -e "s/#singleReads/F/" $fastQC_script_path
			sed -i -e "s/#deploymentServer/${DEPLOYMENT_SERVER//\//\\/}/" $fastQC_script_path	
  			sed -i -e "s/#deploymentPath/${fastqc_deployment_path//\//\\/}/" $fastQC_script_path	
			sed -i -e "s/#summaryPath/${fastqc_summary_deployment//\//\\/}/" $fastQC_script_path

		  	#submit job 
		  	log_output_path=`echo $fastQC_script_path | perl -pe 's/\.sh/\.log/g'`

			local job_id=null
			echo "qsub -W depend=afterok:$bcl2fastq_job_id -o $log_output_path $fastQC_script_path"
		  	job_id=`qsub -W depend=afterok:$bcl2fastq_job_id -o $log_output_path $fastQC_script_path`
		  	#job_id=`qsub -o $log_output_path $fastQC_script_path`
			echo "`$NOW`Read pair: $fastq_read1 AND $fastq_read2"		
			echo "`$NOW`Job ID: $job_id"
			echo -e "$job_id" >> $job_id_list				

		done <$path_sample_sheet_reformatted

	done <$BCL2FASTQ_JOB_ID_LIST

	#submit summary job for each project
	####################################
	
	for project in `sed 1d $path_sample_sheet_reformatted | cut -d ',' -f10 | perl -e 'while(<>){ s/\s//g; print "$_\n";}' | sort | uniq`
	do

		echo "`$NOW`creating and submitting job script for summary of results"
		#create summary script from template
        	local project_rawdata_dir=$DATA_VOL_IGF/rawdata/$project/fastq/$SEQRUN_DATE
		local project_runs_dir=$DATA_VOL_IGF/runs/$project/fastqc/$TODAY
		local project_results_dir=$DATA_VOL_IGF/results/$project/fastqc/$SEQRUN_DATE
		
		local ms_runs_dir=$project_runs_dir/multisample		
		
		local ms_results_dir=$project_results_dir/multisample
	
		local summary_path=$ms_runs_dir/summary.$SEQRUN_NAME.pl
		cp $FASTQC_SCRIPT_DIR/summary_fastqc.pl $summary_path
		chmod 770 $summary_path

		local path_fastq_dir=$project_rawdata_dir
		
		local fastqc_summary_deployment=$DEPLOYMENT_BASE_DIR/project/$project/fastqc/$SEQRUN_DATE

		#configure summary script, it will be executed from fastqc script
		sed -i -e "s/#pathReadsFastq/${path_fastq_dir//\//\\/}/" $summary_path
		sed -i -e "s/#pathReportsDir/${project_results_dir//\//\\/}/" $summary_path
		sed -i -e "s/#pathRunsDir/${project_runs_dir//\//\\/}/" $summary_path
		sed -i -e "s/#pathMSReportsDir/${ms_results_dir//\//\\/}/" $summary_path
		sed -i -e "s/#deploymentServer/$DEPLOYMENT_SERVER/" $summary_path
		sed -i -e "s/#summaryDeployment/${fastqc_summary_deployment//\//\\/}/" $summary_path

		#summary is on hold until fastqc runs are completed 
		#collect fastqc job ids for dependency variable
		local job_id_list=$ms_runs_dir/job_id_list.$SEQRUN_NAME.txt
		local summary_job_dependency="afterany"
		for job_id in `grep 'cx1' $job_id_list`
		do

			job_id=`basename $job_id .cx1b`
			summary_job_dependency="$summary_job_dependency:$job_id"

		done

		#submit job 
		local log_output_path=`echo $summary_path | perl -pe 's/\.pl/\.log/g'`

		local job_id=null
		job_id=`qsub -q $QUEUE -W depend=$summary_job_dependency -o $log_output_path -j oe $summary_path`
		echo "qsub -q $QUEUE -W depend=$summary_job_dependency -o $log_output_path -j oe $summary_path"
		echo "`$NOW`Job ID:$job_id"

	done

	#submit FastQC jobs for unassigned reads
	########################################
	local seqrun_runs_dir=$DATA_VOL_IGF/runs/seqrun/$SEQRUN_NAME/fastqc/$TODAY
	local ms_runs_dir=$seqrun_runs_dir/multisample
	mkdir -m 770 -p $seqrun_runs_dir
	mkdir -m 770 -p $ms_runs_dir
	
	#initialise job dependency list
	local job_id_list=$ms_runs_dir/job_id_list.$SEQRUN_NAME.txt
	echo -n "" > $job_id_list
	chmod 660 $job_id_list	
	
	while read row
	do

		local lane=`echo $row | cut -f1 -d ','`
		local bcl2fastq_job_id=`echo $row | cut -f2 -d ','`
		
		local path_reads_dir=$DATA_VOL_IGF/rawdata/seqrun/fastq/$SEQRUN_NAME/Undetermined_indices/Sample_lane${lane}
		local fastq_read1=lane${lane}_Undetermined_L00${lane}_R1_001.fastq.gz
		local fastq_read2=lane${lane}_Undetermined_L00${lane}_R2_001.fastq.gz
		local sample_name="Sample_lane${lane}"
			
		#create output directory for the QC reports for each file
		echo "`$NOW`creating output directory for QC reports of $sample_name "
		local seqrun_runs_dir=$DATA_VOL_IGF/runs/seqrun/$SEQRUN_NAME/fastqc/$TODAY
		local seqrun_results_dir=$DATA_VOL_IGF/results/seqrun/$SEQRUN_NAME/fastqc/$SEQRUN_DATE
		local ms_runs_dir=$seqrun_runs_dir/multisample
		local qc_report_outputdir=$seqrun_results_dir/$sample_name
		
		mkdir -m 770 -p $seqrun_results_dir
		mkdir -m 770 -p $seqrun_results_dir/multisample
		
		mkdir -m 770 -p $qc_report_outputdir
	
		local job_id_list=$ms_runs_dir/job_id_list.$SEQRUN_NAME.txt

		#create deployment directories for the QC reports for each file
		local fastqc_deployment_path=$DEPLOYMENT_BASE_DIR/seqrun/$SEQRUN_NAME/fastqc/$SEQRUN_DATE/$sample_name
		local fastqc_summary_deployment=$DEPLOYMENT_BASE_DIR/seqrun/$SEQRUN_NAME/fastqc/$SEQRUN_DATE
	
		#create fastqc script from template
		echo "`$NOW`creating and submitting job scripts for QC of fastq files for sample $sample_name in lane $lane"
		
		#handling each fastq file, in each sample directory
		local sample_runs_dir=$seqrun_runs_dir/$sample_name
		mkdir -m 770 -p $sample_runs_dir
			
		local fastQC_script_path=$sample_runs_dir/fastQC.$fastq_read1.sh	
		cp $FASTQC_SCRIPT_DIR/fastQC.sh $fastQC_script_path
		chmod 770 $fastQC_script_path			
		
		#configure fastqc script
		sed -i -e "s/#pathReadsFastq/${path_reads_dir//\//\\/}/" $fastQC_script_path
		sed -i -e "s/#fastqRead1/${fastq_read1//\//\\/}/" $fastQC_script_path
		sed -i -e "s/#fastqRead2/${fastq_read2//\//\\/}/" $fastQC_script_path
		sed -i -e "s/#pathQcReportDir/${qc_report_outputdir//\//\\/}/" $fastQC_script_path
		sed -i -e "s/#singleReads/F/" $fastQC_script_path
		sed -i -e "s/#deploymentServer/${DEPLOYMENT_SERVER//\//\\/}/" $fastQC_script_path	
		sed -i -e "s/#deploymentPath/${fastqc_deployment_path//\//\\/}/" $fastQC_script_path	
		sed -i -e "s/#summaryPath/${fastqc_summary_deployment//\//\\/}/" $fastQC_script_path

	  	#submit job 
	  	log_output_path=`echo $fastQC_script_path | perl -pe 's/\.sh/\.log/g'`
		local job_id=null
		echo "qsub -W depend=afterok:$bcl2fastq_job_id -o $log_output_path $fastQC_script_path"
	  	job_id=`qsub -W depend=afterok:$bcl2fastq_job_id -o $log_output_path $fastQC_script_path`
	  	#job_id=`qsub -o $log_output_path $fastQC_script_path`
		echo "`$NOW`Read pair: $fastq_read1 AND $fastq_read2"		
		echo "`$NOW`Job ID: $job_id"
		echo -e "$job_id" >> $job_id_list		
		chmod 660 $job_id_list	
				
	done <$BCL2FASTQ_JOB_ID_LIST	
		

	#submit summary job for unassigned reads
	########################################
		
	#create summary directory on deployment server
	local fastqc_summary_deployment=$DEPLOYMENT_BASE_DIR/seqrun/$SEQRUN_NAME/fastqc/$SEQRUN_DATE
	ssh $DEPLOYMENT_SERVER "mkdir -p -m 775 $fastqc_summary_deployment"  > /dev/null 2>&1
	scp -r ${FASTQC_SCRIPT_DIR}/../../resources/images/error.png $DEPLOYMENT_SERVER:$fastqc_summary_deployment/ > /dev/null 2>&1
	scp -r ${FASTQC_SCRIPT_DIR}/../../resources/images/tick.png $DEPLOYMENT_SERVER:$fastqc_summary_deployment/ > /dev/null 2>&1
	scp -r ${FASTQC_SCRIPT_DIR}/../../resources/images/warning.png $DEPLOYMENT_SERVER:$fastqc_summary_deployment/ > /dev/null 2>&1
	ssh $DEPLOYMENT_SERVER "chmod -R 664 $fastqc_summary_deployment/*png" > /dev/null 2>&1
	
	echo "`$NOW`creating and submitting job script for summary of results"
	#create summary script from template
	local seqrun_runs_dir=$DATA_VOL_IGF/runs/seqrun/$SEQRUN_NAME/fastqc/$TODAY
	local seqrun_results_dir=$DATA_VOL_IGF/results/seqrun/$SEQRUN_NAME/fastqc/$SEQRUN_DATE
    	local seqrun_rawdata_dir=$DATA_VOL_IGF/rawdata/seqrun/fastq/$SEQRUN_NAME
	
	local ms_runs_dir=$seqrun_runs_dir/multisample				
	local ms_results_dir=$seqrun_results_dir/multisample
	
	mkdir -m 770 -p $ms_runs_dir
	mkdir -m 770 -p $ms_results_dir
	
	local summary_path=$ms_runs_dir/summary.$SEQRUN_NAME.pl
	cp $FASTQC_SCRIPT_DIR/summary_fastqc.pl $summary_path
	chmod 770 $summary_path

	local path_fastq_dir=$seqrun_rawdata_dir/Undetermined_indices
	
	#configure summary script, it will be executed from fastqc script
	sed -i -e "s/#pathReadsFastq/${path_fastq_dir//\//\\/}/" $summary_path
	sed -i -e "s/#pathReportsDir/${seqrun_results_dir//\//\\/}/" $summary_path
	sed -i -e "s/#pathRunsDir/${seqrun_runs_dir//\//\\/}/" $summary_path
	sed -i -e "s/#pathMSReportsDir/${ms_results_dir//\//\\/}/" $summary_path
	sed -i -e "s/#deploymentServer/$DEPLOYMENT_SERVER/" $summary_path
	sed -i -e "s/#summaryDeployment/${fastqc_summary_deployment//\//\\/}/" $summary_path

	#summary is on hold until fastqc runs are completed 
	#collect fastqc job ids for dependency variable
	local job_id_list=$ms_runs_dir/job_id_list.$SEQRUN_NAME.txt
	local summary_job_dependency="afterany"
	for job_id in `grep 'cx1' $job_id_list`
	do

		job_id=`basename $job_id .cx1b`
		summary_job_dependency="$summary_job_dependency:$job_id"

	done

	#submit job 
	local log_output_path=`echo $summary_path | perl -pe 's/\.pl/\.log/g'`

	local job_id=null
	job_id=`qsub -q $QUEUE -W depend=$summary_job_dependency -o $log_output_path -j oe $summary_path`
	echo "qsub -q $QUEUE -W depend=$summary_job_dependency -o $log_output_path -j oe $summary_path"
	echo "`$NOW`Job ID:$job_id"

}


#creates job scripts
function submitBWAMEMJobs {

	local seqrun_directory=$1
		
	#create deployment directories
	for project in `sed 1d $seqrun_directory/$FLOWCELL_ID.csv| cut -d ',' -f10 | perl -e 'while(<>){ s/\s//g; print "$_\n";}' | sort | uniq`
	do
	
		mkdir -m 770 -p $DATA_VOL_IGF/analysis/$project/bwa/$TODAY/multisample	
		local ms_analysis_dir=$DATA_VOL_IGF/analysis/$project/bwa/$TODAY/multisample
		
		#initialise BWA job id list
		local bwa_job_id_list=$ms_analysis_dir/job_id_list.txt
		echo -n "" > $bwa_job_id_list
		chmod 660 $bwa_job_id_list

		#create summary directory on deployment server
		local bwa_summary_deployment=$DEPLOYMENT_BASE_DIR/project/$project/bwa/$TODAY
		ssh $DEPLOYMENT_SERVER "mkdir -p -m 775 $bwa_summary_deployment" > /dev/null 2>&1
		scp -r ${BWA_SCRIPTS_DIR}/../../resources/images/error.png $DEPLOYMENT_SERVER:$bwa_summary_deployment/ > /dev/null 2>&1
		scp -r ${BWA_SCRIPTS_DIR}/../../resources/images/tick.png $DEPLOYMENT_SERVER:$bwa_summary_deployment/ > /dev/null 2>&1
		scp -r ${BWA_SCRIPTS_DIR}/../../resources/images/warning.png $DEPLOYMENT_SERVER:$bwa_summary_deployment/ > /dev/null 2>&1
		ssh $DEPLOYMENT_SERVER "chmod -R 664 $bwa_summary_deployment/*png" > /dev/null 2>&1

	done



	while read row
	do


		local lane=`echo $row | cut -f1 -d ','`
		local bcl2fastq_job_id=`echo $row | cut -f2 -d ','`			

		local rowcount=0
		while read line
		do
			
			#skip sample sheet header
			rowcount=$(( $rowcount + 1 )) 
			if [ "$rowcount" -eq "1" ]
			then
				continue
			fi

			#skip samples not in current lane...
			local sample_lane=`echo $line | cut -f2 -d ',' | perl -pe 's/\s//g'`
			if [ "$sample_lane" -ne "$lane" ]
			then
				continue
			fi

			#..for samples in current lane...
			local sample_name=`echo $line | cut -f3 -d ',' | perl -pe 's/\s//g'`
			local index=`echo $line | cut -f5 -d ',' | perl -pe 's/\s//g'`
			#local project_name=`echo $line | cut -f10 -d ',' | cut -d ':' -f1 | perl -pe 's/\s//g'`			
			local project_name=`echo $line | cut -f10 -d ',' | perl -pe 's/\s//g'`			
							
			local path_reads_dir=$DATA_VOL_IGF/rawdata/$project_name/fastq/$sample_name
			local fastq_read1=${SEQRUN_NAME}_${index}_L00${lane}_R1_001.fastq.gz
			local fastq_read2=${SEQRUN_NAME}_${index}_L00${lane}_R2_001.fastq.gz

			local fastq_read1_no_ext=`basename $fastq_read1 .gz`
			local fastq_read2_no_ext=`basename $fastq_read2 .gz`

			#get reference FASTA file names
			local species=`echo $line | cut -f11 -d ',' | perl -pe 's/\s//g'`										
			local assembly=`echo $line | cut -f12 -d ',' | perl -pe 's/\s//g'`
			local sequence_type=`echo $line | cut -f13 -d ',' | perl -pe 's/\s//g'`

			local reference_fasta_index=$DATA_VOL_IGF/resources/reference/index/bwa/eukaryote/$species/$assembly/$assembly.fa
			if [[ $sequence_type = "rna" ]]
			then
				reference_fasta_index=$DATA_VOL_IGF/resources/reference/index/bowtie2/eukaryote/$species/$assembly/$assembly.fa				
			fi


			local reference_fasta_name=`basename $reference_fasta_index .gz` 			

			#get reference FASTA directory path
			local path_reference_fasta_dir=`dirname $reference_fasta_index`
		
			local path_reference_fasta_no_ext=$path_reference_fasta_dir/$reference_fasta_name
			local path_reference_dict_dir=`echo $path_reference_fasta_dir | perl -pe 's/\/index\/bwa\//\/dict\//'`				
			local reference_dict_name=`basename $reference_fasta_name .fa`
			reference_dict_name=${reference_dict_name}.dict
			local path_reference_dict=$path_reference_dict_dir/$reference_dict_name

			

			echo "`$NOW`creating and submitting job scripts:"

			#create directory structure for merged bam files;
                        #each file will contain the same reads as in the original fastq file
			local path_results_dir=$DATA_VOL_IGF/rawdata/$project_name/bam/$sample_name
			local path_results_dir_cram=$DATA_VOL_IGF/rawdata/$project_name/cram/$sample_name

			if [ ! -e path_results_dir ]; then
				echo "`$NOW`creating BWA results directory $path_results_dir"
				mkdir -m 770 -p $path_results_dir
				echo "`$NOW`creating CRAM directory $path_results_dir_cram"
				mkdir -m 770 -p $path_results_dir_cram
			fi

			local path_run_dir=$DATA_VOL_IGF/analysis/$project_name/bwa/$TODAY/$sample_name
			local path_scripts_dir=$path_run_dir/run
			local path_mapping_dir=$path_run_dir/mapping
			local path_tmp_dir=$path_run_dir/tmp			
			

			if [ ! -e path_run_dir ]; then
				echo "`$NOW`creating BWA analysis directories in $path_results_dir"
				mkdir -m 770 -p $path_run_dir
				mkdir -m 770 -p $path_scripts_dir
				mkdir -m 770 -p $path_mapping_dir
				mkdir -m 770 -p $path_tmp_dir
			fi
			
			
			SETUP_LOG=$path_scripts_dir/setup.log
			echo -n "" > $SETUP_LOG


			#temporary directory for splitfastq results
			local splitfastq_output_dir=$path_tmp_dir/${fastq_read1_no_ext}_split	
			mkdir -m 770 -p $splitfastq_output_dir

			########################################
			#submit splitting jobs

			echo "`$NOW`submitting jobs to split fastq files into $READS_PER_RUN chunks... " >> $SETUP_LOG
	   	
			#variables to store job dependencies
			splitfastq_dependencies=afterok


			for fastq in $path_reads_dir/$fastq_read1 $path_reads_dir/$fastq_read2
			do
		
				local fastq_name=`basename $fastq .gz`
			
				#calculate required temp space
				local file_size_mb=$(( $FASTQ_FILE_SIZE_KB / 1024 ))
				local tmp_space_mb=$(( $file_size_mb * 2 ))

				local script_path=$path_scripts_dir/splitFastq.$fastq_name.sh
				cp $BWA_SCRIPTS_DIR/splitFastq.sh $script_path
				chmod 770 $script_path

				sed -i -e "s/#walltimeHours/$WALLTIME_HOURS_SPLITFASTQ/" $script_path  
				sed -i -e "s/#threads/$THREADS_PER_RUN_SPLITFASTQ/" $script_path
				sed -i -e "s/#tmpSpace/$tmp_space_mb/" $script_path
				sed -i -e "s/#inputFastq/${fastq//\//\\/}/" $script_path
				sed -i -e "s/#outputDir/${splitfastq_output_dir//\//\\/}/" $script_path
				sed -i -e "s/#readsPerChunk/$READS_PER_RUN_BWA/" $script_path

				local log_path=`echo $script_path | perl -pe 's/\.sh/\.log/g'`

				echo "`$NOW`submitting fastq splitting job:" >> $SETUP_LOG
				echo "`$NOW`splitFastq.$fastq_name.sh" >> $SETUP_LOG
				echo -n "`$NOW`" >> $SETUP_LOG

				echo "qsub -W depend=afterok:$bcl2fastq_job_id -o $log_path $script_path"
				local job_id=`qsub -W depend=afterok:$bcl2fastq_job_id -o $log_path $script_path`
				echo $job_id >> $SETUP_LOG

				splitfastq_dependencies="$splitfastq_dependencies:$job_id"

			done;

			#######################



			local bwa_summary_results=$DATA_VOL_IGF/analysis/$project_name/bwa/$TODAY
			bwa_summary_deployment=$DEPLOYMENT_BASE_DIR/project/$project/bwa/$TODAY



			local BWA_SUMMARY_RESULTS=$DEPLOYMENT_BASE_DIR/$project_name/bwa/


			#create summary directory on deployment server
			local bwamapping_summary_deployment=$DEPLOYMENT_BASE_DIR/project/$project/bwa
			local output_prefix=$fastq_read1_no_ext.vs.$reference_fasta_name
	
			local bwa_mapping_script=$path_scripts_dir/submitMappingScript.$output_prefix.sh
			cp $BWA_SCRIPTS_DIR/submitMappingScript.sh $bwa_mapping_script
			chmod 770 $bwa_mapping_script
	
			sed -i -e "s/#baseDir/${BWA_SCRIPTS_DIR//\//\\/}/" $bwa_mapping_script
			sed -i -e "s/#setupLog/${SETUP_LOG//\//\\/}/" $bwa_mapping_script
			sed -i -e "s/#pathTmpDir/${path_tmp_dir//\//\\/}/" $bwa_mapping_script
			sed -i -e "s/#fastqRead1NoExt/$fastq_read1_no_ext/" $bwa_mapping_script
			sed -i -e "s/#patternRead1/$PATTERN_READ_1/" $bwa_mapping_script
			sed -i -e "s/#patternRead2/$PATTERN_READ_2/" $bwa_mapping_script
			sed -i -e "s/#queue/$QUEUE/" $bwa_mapping_script
			sed -i -e "s/#pathScriptsDir/${path_scripts_dir//\//\\/}/" $bwa_mapping_script
			sed -i -e "s/#pathResultsDir/${path_results_dir//\//\\/}/" $bwa_mapping_script
			sed -i -e "s/#pathMappingDir/${path_mapping_dir//\//\\/}/" $bwa_mapping_script
			sed -i -e "s/#pathReferenceFastaNoExt/${path_reference_fasta_no_ext//\//\\/}/" $bwa_mapping_script
			sed -i -e "s/#pathRunDir/${path_run_dir//\//\\/}/" $bwa_mapping_script
			sed -i -e "s/#today/$TODAY/" $bwa_mapping_script
			sed -i -e "s/#deploymentServer/$DEPLOYMENT_SERVER/" $bwa_mapping_script
			sed -i -e "s/#summaryDeployment/${bwa_summary_deployment//\//\\/}/" $bwa_mapping_script
			sed -i -e "s/#summaryResults/${bwa_summary_results//\//\\/}/" $bwa_mapping_script
			sed -i -e "s/#walltimeHoursPerRun/$WALLTIME_HOURS_PER_RUN_BWA/" $bwa_mapping_script
			sed -i -e "s/#threadsPerRun/$THREADS_PER_RUN_BWA/" $bwa_mapping_script
			sed -i -e "s/#cram2BamConversion/T/"  $bwa_mapping_script
			sed -i -e "s/#samtoolsVersion/$SAMTOOLS_VERSION/" $bwa_mapping_script
			sed -i -e "s/#bwaVersion/$BWA_VERSION/" $bwa_mapping_script
			sed -i -e "s/#pathReferenceSeqDict/${path_reference_dict//\//\\/}/" $bwa_mapping_script
			sed -i -e "s/#pathOutputCramDir/${path_results_dir_cram//\//\\/}/"  $bwa_mapping_script		
			sed -i -e "s/#deploy_on_irods/$IRODS_DEPLOYMENT/"  $bwa_mapping_script				
			

			local bwa_log_path=`echo $bwa_mapping_script | perl -pe 's/\.sh/\.log/g'`
	
			echo "`$NOW`submitting submitMappingScript job for $fastq_read1 AND $fastq_read2 :"   >> $SETUP_LOG
			echo "`$NOW`submitMappingScript.$output_prefix.sh"   >> $SETUP_LOG
					
			job_id=`qsub -W depend=$splitfastq_dependencies -o $bwa_log_path $bwa_mapping_script`
			echo "qsub -W depend=$splitfastq_dependencies -o $bwa_log_path $bwa_mapping_script"
			echo "`$NOW`Job ID:$job_id"  >> $SETUP_LOG
				
		done <$seqrun_directory/$FLOWCELL_ID.csv

	done <$BCL2FASTQ_JOB_ID_LIST

	echo "`$NOW`All done!"
}

						
#get run name, run date and flow cell ID

SEQRUN_NAME=`basename $INPUT_SEQRUN_DIR`
SEQRUN_DATE=`echo $SEQRUN_NAME | perl -e 'while(<>){ if(/^(\d{2})(\d{2})(\d{2})_/){ print "20$1-$2-$3"; }}'`;
FLOWCELL_ID=`echo $SEQRUN_NAME | cut -f4 -d '_' | perl -e '$prefix=<>; chomp($prefix); if(!($prefix =~ /-/)){ $prefix=~s/^[AB]//; } print $prefix'`

CUSTOMERS_RUNS_FILE=$INPUT_SEQRUN_DIR/customerInfo.csv

#DEPLOYMENT STRUCTURE
#creates deployment results structure on eliot webserver
while read row
        do
        project_tag=`echo $row|cut -d ',' -f1`
        #better to do on cx1 on the cluster
        #checks if the project directory already exists in the web server
	if ssh $DEPLOYMENT_SERVER "[ -d /$DEPLOYMENT_PATH/$project_tag ]" < /dev/null ;then
               	echo "directory " $DEPLOYMENT_PATH/$project_tag " exists.";
		#if fastq directory already exists must add the new files there
		#ssh $DEPLOYMENT_SERVER "rm $DEPLOYMENT_PATH/$project_tag/fastq"
	else
		#creates password proctected project_tag dir
		echo "`$NOW` directory " $DEPLOYMENT_PATH/$project_tag " does not exist. Creates password proctected";
		ssh $DEPLOYMENT_SERVER "mkdir -m 775 -p $DEPLOYMENT_PATH/$project_tag" < /dev/null
	fi
	#added in any case I write the secure files
	cp $HTACCESS_TML $HTACCESS
	cp $HTPASSWD_TML ${HTPASSWD}.$project_tag
	#configure .htaccess
	sed -i -e "s/#project_tag/$project_tag/" $HTACCESS
	scp $HTACCESS $DEPLOYMENT_SERVER:$DEPLOYMENT_PATH/$project_tag
	scp $HTPASSWD.${project_tag} $DEPLOYMENT_SERVER:$DEPLOYMENT_PATH/$project_tag/$HTPASSWD < /dev/null
	ssh $DEPLOYMENT_SERVER "chmod 775 $DEPLOYMENT_PATH/$project_tag/$HTACCESS" < /dev/null
	ssh $DEPLOYMENT_SERVER "chmod 644 $DEPLOYMENT_PATH/$project_tag/$HTPASSWD" < /dev/null
	project_usr=`echo $row|cut -d ',' -f3`	
	#for Test
	#echo "USER: $project_usr"
	project_passwd=`echo $row|cut -d ',' -f4`	
	#for Test
	#echo "PASSW: $project_passwd"
	ssh $DEPLOYMENT_SERVER "cd $DEPLOYMENT_PATH/$project_tag;htpasswd -bm .htpasswd $project_usr $project_passwd" < /dev/null
	# now remove local password protection file
	rm $HTACCESS
	rm ${HTPASSWD}.$project_tag
done <$CUSTOMERS_RUNS_FILE

#extract sample sheet name from run name:
#HiSeq run: the sample sheet is named after the flowcell ID; the flowcell ID
#is the last token of the run name preceeded by A or B depending on wether the
#flow cell was run as flowcell A or B on the machine: <[A|B]><flowcell_id>.csv
#MiSeq run: MiSeq runs are detected by the hyphen in the last token of the run name;
#for MiSeq runs the sample sheet is named SampleSheet.csv 
#SAMPLE_SHEET_PREFIX=`echo $SEQRUN_NAME | cut -f4 -d '_' | perl -e '$prefix=<>; chomp($prefix); if($prefix =~ /-/){ $prefix=SampleSheet;  }else{ $prefix=~s/^[AB]//; } print $prefix'`

PATH_RUN_DIR_BCL2FASTQ=$DATA_VOL_IGF/runs/seqrun/$SEQRUN_NAME/bcl2fastq/$TODAY
PATH_RESULTS_DIR_BCL2FASTQ=$DATA_VOL_IGF/results/seqrun/$SEQRUN_NAME/bcl2fastq/$TODAY				
PATH_RAWDATA_DIR=$DATA_VOL_IGF/rawdata

mkdir -m 770 -p $PATH_RUN_DIR_BCL2FASTQ
chmod -R 770 $DATA_VOL_IGF/runs/seqrun/$SEQRUN_NAME


#we need a bcl2fastq job-list file for split_Fastq_dependencies, but MOST IMPORTANTLY, knowing the lane that belonged to a certain bcl2fastq job enables
#us to know which samples are in that lane; i.e, correspond bcl2fast dependency with the respective samples

#initialise job ID lisr for split fastq dependencies
BCL2FASTQ_JOB_ID_LIST=$PATH_RUN_DIR_BCL2FASTQ/bcl2fastq.$SEQRUN_NAME.job_id_list.csv
echo -n "" > $BCL2FASTQ_JOB_ID_LIST	


# BCL2FASTQ RUNS
################

#get lanes
#MiSeq sample sheets are detected by the missing "Lane" column.
#If the column is not present it is assumed that the sample sheet
#is a MiSeq sample sheet and lane equals 1
LANES=`cut -f1 -d ',' $INPUT_SEQRUN_DIR/SampleSheet.csv | perl -e 'while(<>){ if(/\[Data\]/){ $_=<>; if(/^Lane/){ while(<>){ print; }} else { print "1\n"; } }}' | sort | uniq`

#parse sample sheet into format compatible with bcl2fastq format
#in case the sample sheet has been processed on Windows...
dos2unix $INPUT_SEQRUN_DIR/SampleSheet.csv
#convert sample sheet
PATH_SAMPLE_SHEET=$INPUT_SEQRUN_DIR/SampleSheet.csv
PATH_SAMPLE_SHEET_REFORMATTED=$PATH_RUN_DIR_BCL2FASTQ/$FLOWCELL_ID.csv
$BASEDIR/reformatSampleSheet.pl $PATH_SAMPLE_SHEET $PATH_SAMPLE_SHEET_REFORMATTED

for LANE in $LANES
#for LANE in `sed 1d $PATH_SAMPLE_SHEET_REFORMATTED | cut -d ',' -f2 | perl -e 'while(<>){ s/\s//g; print "$_\n";}' | sort | uniq`
#for LANE in {1..8}
do
	while read line
        do
		#skip samples not in current lane...
		sample_lane=`echo $line | cut -f2 -d ',' | perl -pe 's/\s//g'`
		if [ $sample_lane == $LANE ]
		then
			adapter_type=`echo $line  | cut -d ',' -f4|cut -d ':' -f4 | perl -pe 's/\s//g'` 	
			#for TEST
			echo "ADAPTER TYPE $adapter_type"
			break
		fi
	done <$PATH_SAMPLE_SHEET_REFORMATTED
	submitbcl2fastqJobs $INPUT_SEQRUN_DIR $PATH_SAMPLE_SHEET $PATH_SAMPLE_SHEET_REFORMATTED $LANE $adapter_type
done

# SUBMIT JOB TO TAR RESALTS OF BCL2FASTQ RUNS
submitTarResultsBcl2fastq $PATH_SAMPLE_SHEET_REFORMATTED $BCL2FASTQ_JOB_ID_LIST


# FASTQC RUNS
#############
submitfastqcJobs $INPUT_SEQRUN_DIR $PATH_SAMPLE_SHEET_REFORMATTED

exit 0

# BWA RUNS
#############

#submitBWAMEMJobs $INPUT_SEQRUN_DIR

