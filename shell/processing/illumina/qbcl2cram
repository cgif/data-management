#!/bin/bash
#
# sets up directory structure and generates, configures and submits scripts to run
# bcl2fastq conversion, generate fastqc reports, map reads to a reference geneome,
# convert BAM to CRAM files and deploy CRAM files into iRODS on eliot
#

#CONFIGURATION
##############

# getting present date and time
NOW="date +%Y-%m-%d%t%T%t"

# getting present date
TODAY=`date +%Y-%m-%d`


# returns absolute path to qfastqc directory, not changing your current directory
# setting all default values for the pipeline
BASEDIR="$( cd "$( dirname "$0" )" && pwd )"
BASE_PYTHON_DIR=''                                  ## set python dir path
USAGE="$BASEDIR/qbcl2cram.usage"			
DATA_VOL_IGF=/project/tgu
DEPLOYMENT_SERVER=eliot.med.ic.ac.uk    
DEPLOYMENT_BASE_DIR=/www/html/report
QUEUE=pqcgi

# DEPLOYMENT SETTINGS
# DO NOT CHANGE
CUSTOMERS_FILEPATH=/home/igf/docs/igf/users/
DEPLOYMENT_PATH=/www/html/report/project
HTACCESS=.htaccess
HTPASSWD=.htpasswd
TEMPLATE_PATH=$BASEDIR/../../../templates
HTACCESS_TML=$TEMPLATE_PATH/htaccess.tml
HTPASSWD_TML=$TEMPLATE_PATH/htpasswd.tml


# BCL2FASTQ
# Adding new parameters for bcl2fastq v2
WALLTIME_HOURS_PER_JOB_BCL2FASTQ=72
MEMORY_PER_BCL2FASTQ_JOB=10000mb
TMP_SPACE_GB_BCL2FASTQ=100
BCL2FASTQ_LOADING_THREADS=1
BCL2FASTQ_PROCESSING_THREADS=1
BCL2FASTQ_WRITING_THREADS=1
READOFFSET=1
INDEXOFFSET=0

# TARBCL2FASTQ
IRODS_FASTQ_DEPLOY_SCRIPT=$BASEDIR/irods_deploy_fastq.sh
DEPLOYMENT_TAR_BASE_DIR=/data/www/html/report/data

#SPLIT FASTQ
FASTQ_FILE_SIZE_KB=20000000
THREADS_PER_RUN_SPLITFASTQ=4
WALLTIME_HOURS_SPLITFASTQ=72

#BWA
READS_PER_RUN_BWA=10000000
THREADS_PER_RUN_BWA=2
PATTERN_READ_1=_R1_
PATTERN_READ_2=_R2_
WALLTIME_HOURS_PER_RUN_BWA=30

FASTQC_SCRIPT_DIR=$BASEDIR/
WORKFLOWS_RESOURCES_DIR=$BASEDIR/../../../../workflows/shell/resources
WORKFLOW_REPO_DIR=$BASEDIR/../../../../workflows/
GROUP_VOL_CGI=/groupvol/cgi
BWA_SCRIPTS_DIR=$BASEDIR/../../../../workflows/shell/mapping/bwa
SPLIT_FASTQ_SCRIPT_DIR=$BASEDIR/../../../../workflows/shell/mapping/bwa/
TOPHAT_SCRIPTS_DIR=$BASEDIR/../../../../workflows/shell/mapping/tophat

# Changed the BCL2FASTQ version
BCL2FASTQ_VERSION=2.18
SAMTOOLS_VERSION=1.1
BWA_VERSION=0.7.5a

#SERP
SERP_SCRIPT=$BASEDIR/serp.pl
SERP_DEPENDENCIES="afterany"

#SLACK
SLACK_URL=https://slack.com/api/chat.postMessage
SLACK_OPT="-d 'channel'='C4W5G8550' -d 'username'='igf_bot'"

#COMMAND LINE ARGS : Legacy parameters
##################

USE_IRODS="T"
REMOVE_ADAPTORS="F"
REMOVE_BAMS="T"

####### XXXXXXXXXXX
while getopts "i:t:a:p:s:b:m:dh" option; do
case "$option" in
	i) INPUT_SEQRUN_DIR="$OPTARG";;
	t) USE_IRODS="$OPTARG";;
	a) REMOVE_ADAPTORS="$OPTARG";;
	p) BASE_PYTHON_DIR="$OPTARG";;
	s) SLACK_TOKEN="$OPTARG";;
	b) REMOVE_BAMS="$OPTARG";;
	h) cat "$USAGE"; exit 0;;
	[?]) cat "$USAGE"; exit 1;;
esac
done

#check if required arguments are missing
if [ -z $INPUT_SEQRUN_DIR ]
then
	cat "$USAGE"
	exit 1
fi

PYTHONPATH=`printenv PYTHONPATH`
export PYTHONPATH="$BASE_PYTHON_DIR:$PYTHONPATH"  ## set PYTHONPATH lib

#FUNCTIONS
##########

#creates job scripts
function submitbcl2fastqJobs {
	#bcl2Fastq variables
	local seqrun_directory=$1
	local path_sample_sheet=$2
	local path_sample_sheet_reformatted=$2
	local lane=$3
	local adapter_type=$4
	local mixedIndexLanes=$5
        
 
	#BCL2FASTQ CONVERSION
	#####################


	tlane=`echo $lane | cut -d "_" -f1`

 	#reads from RunInfo if it is Single-Read or Paired-End Sequencing RUN 
 	pairedEnd=`cat $INPUT_SEQRUN_DIR/RunInfo.xml | grep "Read Number=\"4\"" | wc -l`
	

 	#make bases mask pass also mixedIndex information
        local bases_mask=`python $BASE_PYTHON_DIR/scripts/basesMask/makeBasesMask.py --samplesheet_file $path_sample_sheet --runinfo_file $INPUT_SEQRUN_DIR/RunInfo.xml --read_offset $READOFFSET --index_offset $INDEXOFFSET`

	msg="bases mask for run $SEQRUN_NAME, lane $lane is: $bases_mask"
        res=`echo "curl $SLACK_URL -X POST $SLACK_OPT -d 'token'='$SLACK_TOKEN' -d 'text'='$msg'"|sh`
	
	#create summary directory on deployment server
	local bcl2fastq_summary_deployment=$DEPLOYMENT_BASE_DIR/seqrun/$SEQRUN_NAME/bcl2fastq/$TODAY
	ssh $DEPLOYMENT_SERVER "mkdir -p -m 775 $bcl2fastq_summary_deployment"  > /dev/null 2>&1
	ssh $DEPLOYMENT_SERVER "chmod -R 775 $DEPLOYMENT_BASE_DIR/seqrun/$SEQRUN_NAME"  > /dev/null 2>&1
	
	echo -n $lane >> $BCL2FASTQ_JOB_ID_LIST

	local bcl2fastq_script=$PATH_RUN_DIR_BCL2FASTQ/bcl2Fastq.$SEQRUN_NAME.${lane}.sh
	cp $BASEDIR/bcl2fastq.sh $bcl2fastq_script
	chmod 770 $bcl2fastq_script
        echo $BASE_PYTHON_DIR
        total_threads=`expr $BCL2FASTQ_LOADING_THREADS + $BCL2FASTQ_PROCESSING_THREADS + $BCL2FASTQ_WRITING_THREADS`

	sed -i -e "s/#walltimeHours/$WALLTIME_HOURS_PER_JOB_BCL2FASTQ/" $bcl2fastq_script
	sed -i -e "s/#required_memory/$MEMORY_PER_BCL2FASTQ_JOB/" $bcl2fastq_script
	sed -i -e "s|#base_python_dir|$BASE_PYTHON_DIR|" $bcl2fastq_script
	sed -i -e "s/#threads/$total_threads/" $bcl2fastq_script
	sed -i -e "s/#loading_threads/$BCL2FASTQ_LOADING_THREADS/" $bcl2fastq_script
	sed -i -e "s/#processing_threads/$BCL2FASTQ_PROCESSING_THREADS/" $bcl2fastq_script
	sed -i -e "s/#writing_threads/$BCL2FASTQ_WRITING_THREADS/" $bcl2fastq_script
	sed -i -e "s/#runName/$SEQRUN_NAME/" $bcl2fastq_script
	sed -i -e "s/#pathSampleSheet/${path_sample_sheet_reformatted//\//\\/}/" $bcl2fastq_script
	sed -i -e "s/#lane/$tlane/" $bcl2fastq_script
	sed -i -e "s/#basesMask/$bases_mask/" $bcl2fastq_script
	sed -i -e "s/#tmpSpace/$TMP_SPACE_GB_BCL2FASTQ/" $bcl2fastq_script
	sed -i -e "s/#queue/$QUEUE/" $bcl2fastq_script
	sed -i -e "s/#pathSeqRunDir/${seqrun_directory//\//\\/}/" $bcl2fastq_script
	sed -i -e "s/#dataVolIgf/${DATA_VOL_IGF//\//\\/}/" $bcl2fastq_script
	sed -i -e "s/#bcl2FastqVersion/$BCL2FASTQ_VERSION/" $bcl2fastq_script
	sed -i -e "s/#pathRunDir/${PATH_RUN_DIR_BCL2FASTQ//\//\\/}/" $bcl2fastq_script
	sed -i -e "s/#pathResultsDir/${PATH_RESULTS_DIR_BCL2FASTQ//\//\\/}/" $bcl2fastq_script
	sed -i -e "s/#pathRawDataDir/${PATH_RAWDATA_DIR//\//\\/}/" $bcl2fastq_script
	sed -i -e "s/#deploymentServer/${DEPLOYMENT_SERVER//\//\\/}/" $bcl2fastq_script
	sed -i -e "s/#deploymentPath/${bcl2fastq_summary_deployment//\//\\/}/" $bcl2fastq_script
	sed -i -e "s/#pathAdapterDir/${PATH_ADAPTER_DIR//\//\\/}/" $bcl2fastq_script
	sed -i -e "s/#adapterType/$adapter_type/" $bcl2fastq_script
	sed -i -e "s/#pathTemplateHtm/${TEMPLATE_PATH//\//\\/}/" $bcl2fastq_script
	sed -i -e "s/#mixedIndexes/$mixedIndexes/" $bcl2fastq_script
	sed -i -e "s/#ilane/$lane/" $bcl2fastq_script
	sed -i -e "s/#removeAdaptors/$REMOVE_ADAPTORS/" $bcl2fastq_script
	sed -i -e "s/#slackToken/$SLACK_TOKEN/" $bcl2fastq_script

	local log_path=`echo $bcl2fastq_script | perl -pe 's/\.sh/\.log/g'`
	local job_id=null
	echo "qsub -o $log_path $bcl2fastq_script"
	job_id=`qsub -o $log_path $bcl2fastq_script`	
	echo ",$job_id" >> $BCL2FASTQ_JOB_ID_LIST			

}

# creates job script to tar bcl2fastqresults
function submitIrodsDeployFastq {
                local path_sample_sheet_reformatted=$1

                local rowcount=0
                local sample_col=0
                local project_col=0

               # lookup lanes for each project_tag
                for sampleSheetRow in `awk 'BEGIN{data_block=0}{if($0 ~ /^\[Data\]/){data_block=1; next}if(data_block==1){print $0}}' $path_sample_sheet_reformatted`
                do
                        #skip sample sheet header
                        rowcount=$(( $rowcount + 1 ))
                        if [ "$rowcount" -eq "1" ]
                        then 
                             sample_col=`echo $sampleSheetRow | awk -F',' -v tag='Sample_Name' '{ for(i=1;i<=NF;i++){if($i ~ tag){print i}}}'`
                             project_col=`echo $sampleSheetRow | awk -F',' -v tag='Sample_Project' '{ for(i=1;i<=NF;i++){if($i ~ tag){print i}}}'`
                             continue
                        fi

                        #get current    lane...
                        if [ $sample_col -gt 0 ] && [ $project_col -gt 0 ]; then
                            local sample_lane=`echo $sampleSheetRow | cut -f$sample_col -d ','| perl -pe 's/\s//g'`
                            #get project_tag
                            local project_name=`echo $sampleSheetRow | cut -f$project_col -d ',' |perl -pe 's/\s//g'`

                            # create a file with sample_lane foreach project_tag
                            chmod 770 $PATH_RUN_DIR_BCL2FASTQ
                            echo $sample_lane >>  $PATH_RUN_DIR_BCL2FASTQ/$project_name.prj
                        else
                            msg="couldn't identify the sample_col or project_col, stopping irods upload"
                            res=`echo "curl $SLACK_URL -X POST $SLACK_OPT -d 'token'='$SLACK_TOKEN' -d 'text'='$msg'"|sh`
                            exit 1
                        fi
                done
                #create the appropriate index forlane statistics

                for project_file in `find $PATH_RUN_DIR_BCL2FASTQ -type f -name "*.prj" -exec basename {} \;`
                do
                        #for each lane in project_tag
                        local tarresults_job_dependency="afterok"

                        for projectTagRow in `cat $PATH_RUN_DIR_BCL2FASTQ/$project_file | sort -u`
                        do
                                chmod 660 $PATH_RUN_DIR_BCL2FASTQ/$project_file
                                local lane=`echo $projectTagRow | perl -pe 's/\s//g'`

                                while read jobListRow
                                do
                                        #get job_id and verify if it is based ong project_tag
                                        local bcl2fastq_job_id=`echo $jobListRow | cut -f2 -d ','| perl -pe 's/\s//g'`

                                        #collect job ids for dependency variable
                                        job_id=`basename $bcl2fastq_job_id .cx1b`
                                        tarresults_job_dependency="$tarresults_job_dependency:$job_id"

                                done <$BCL2FASTQ_JOB_ID_LIST
                        done
                        #########################################
                        ### create e configure tarJobScript ####
                        local project_tag=`basename $project_file .prj`
                        local deploy_irods_fastq_script=$PATH_RUN_DIR_BCL2FASTQ/irods_deploy_fastq.${project_tag}.sh
                        local deployment_symbolic_link=/www/html/report/project/$project_tag
                        local bcl2fastq_summary_deployment=$DEPLOYMENT_BASE_DIR/seqrun/$SEQRUN_NAME/bcl2fastq/$TODAY

                        cp $IRODS_FASTQ_DEPLOY_SCRIPT $deploy_irods_fastq_script
                        echo $IRODS_FASTQ_DEPLOY_SCRIPT

                        chmod 770 $deploy_irods_fastq_script
                        path_project_tag_dir=$DATA_VOL_IGF/rawdata/$project_tag/fastq
                        sed -i -e "s/#pathProjectTagDir/${path_project_tag_dir//\//\\/}/" $deploy_irods_fastq_script
                        sed -i -e "s/#seqRunDate/$SEQRUN_DATE/" $deploy_irods_fastq_script
                        sed -i -e "s/#seqRunName/$SEQRUN_NAME/" $deploy_irods_fastq_script
                        sed -i -e "s/#runDirBcl2Fastq/${PATH_RUN_DIR_BCL2FASTQ//\//\\/}/" $deploy_irods_fastq_script
                        sed -i -e "s/#customerFilePath/${INPUT_SEQRUN_DIR//\//\\/}/" $deploy_irods_fastq_script
                        sed -i -e "s/#projectTag/$project_tag/" $deploy_irods_fastq_script
                        sed -i -e "s/#mailTemplatePath/${TEMPLATE_PATH//\//\\/}/" $deploy_irods_fastq_script
                        sed -i -e "s/#pathToDestination/${path_project_tag_dir//\//\\/}/" $deploy_irods_fastq_script
	                sed -i -e "s/#slackToken/$SLACK_TOKEN/" $deploy_irods_fastq_script

                        ####### XXXXXXXXXXX
                        sed -i -e "s/#useIrods/$USE_IRODS/" $deploy_irods_fastq_script

                        #submit job
                        local log_output_path=`echo $deploy_irods_fastq_script | perl -pe 's/\.sh/\.log/g'`
                        echo -n "" > $log_output_path
                        echo -n "`$NOW`submitting tarresult job: "
                        echo "$deploy_irods_fastq_script"

                        local job_id=null
                        job_id=`qsub -q $QUEUE -W depend=$tarresults_job_dependency -o $log_output_path -j oe $deploy_irods_fastq_script`
                        
                        SERP_DEPENDENCIES=$SERP_DEPENDENCIES:$job_id
                done
}

function submitfastqcJobs {
  local path_sample_sheet_reformatted=$1
 
  # Adding html for lanes statistics
  chmod 775 ${PATH_RUN_DIR_BCL2FASTQ}/index.html
  local bclfastq_deployment_path=$DEPLOYMENT_BASE_DIR/seqrun/$SEQRUN_NAME/bcl2fastq/$TODAY

  scp $PATH_RUN_DIR_BCL2FASTQ/index.html  $DEPLOYMENT_SERVER:$bclfastq_deployment_path/index.html < /dev/null
  ssh $DEPLOYMENT_SERVER "chmod -R 664 $bclfastq_deployment_path/index.html" < /dev/null

  # Create directory structure for each project in sample sheet
  local project_col=0
  project_col=`grep Sample_Project $path_sample_sheet_reformatted |awk -F',' -v tag='Sample_Project' '{ for(i=1;i<=NF;i++){if($i ~ tag){print i}}}'`

  for project in `awk -v col=$project_col -F',' 'BEGIN{data_block=0}{if($0 ~ /^\[Data\]/){data_block=1; next}if(data_block==1){print $col}}' $path_sample_sheet_reformatted |sort -u|grep -v Sample_Project`
  do
    # PROJECT

    local bcl2fastq_job_id=`cut -f2 -d',' $BCL2FASTQ_JOB_ID_LIST|xargs -i basename {} '.cx1b'|xargs echo -n|sed 's/ /:/g'`

    local fastQC_script_path=$PATH_RUN_DIR_BCL2FASTQ/fastQC.$project.sh
    cp $FASTQC_SCRIPT_DIR/fastQC.sh $fastQC_script_path
    chmod 770 $fastQC_script_path

    # Configure fastqc script
    sed -i -e "s|#projectName|$project|" $fastQC_script_path
    sed -i -e "s|#deploymentServer|$DEPLOYMENT_SERVER|" $fastQC_script_path
    sed -i -e "s|#deploymentPath|$fastqc_deployment_path|" $fastQC_script_path
    sed -i -e "s|#dataVolIgf|$DATA_VOL_IGF|" $fastQC_script_path
    sed -i -e "s|#toDay|$TODAY|" $fastQC_script_path
    sed -i -e "s|#seqrunDate|$SEQRUN_DATE|" $fastQC_script_path
    sed -i -e "s|#workflowRepoDir|$WORKFLOW_REPO_DIR|" $fastQC_script_path
    sed -i -e "s|#fastqcScriptDir|$FASTQC_SCRIPT_DIR|" $fastQC_script_path
    sed -i -e "s|#slackUrl|$SLACK_URL|" $fastQC_script_path
    sed -i -e "s|#slackOpt|$SLACK_OPT|" $fastQC_script_path
    sed -i -e "s|#slackToken|$SLACK_TOKEN|" $fastQC_script_path

    #submit job
    local log_output_path=`echo $fastQC_script_path | perl -pe 's/\.sh/\.log/g'`
    touch $log_output_path
    local job_id=null
    job_id=`qsub -W depend=afterok:$bcl2fastq_job_id -o $log_output_path $fastQC_script_path`
    echo -e "$job_id" >> $job_id_list

    SERP_DEPENDENCIES=$SERP_DEPENDENCIES:$job_id   
  done 
}

#popolate Database with data of the RUN
function popolateDB {

	SETUP_LOG=$PATH_RUN_DIR_BCL2FASTQ/setup.log
	local single_read='T'

	echo " popolate DB ${SERP_DEPENDENCIES}"
 	local script_path=$PATH_RUN_DIR_BCL2FASTQ/serp.$SEQRUN_NAME.pl
        cp ${SERP_SCRIPT} $script_path
        chmod 770 $script_path

	echo "TEST PIRED END $pairedEnd"
 	if [ $pairedEnd -eq 1 ]
 	then
		single_read='F'
	fi

        sed -i -e "s/#runDate/$TODAY/" $script_path
        sed -i -e "s/#inputSeqRun/$SEQRUN_NAME/" $script_path
        sed -i -e "s/#singleRead/$single_read/" $script_path

        local log_path=`echo $script_path | perl -pe 's/\.pl/\.log/g'`

        echo "`$NOW`popolating database job:" >> $SETUP_LOG
        echo "`$NOW`serp.$project.pl" >> $SETUP_LOG
        echo -n "`$NOW`" >> $SETUP_LOG
        echo "`$NOW`dependencies ${SERP_DEPENDENCIES}" >> $SETUP_LOG

        echo "qsub -W depend=${SERP_DEPENDENCIES} -o $log_path -j oe $script_path"
        local job_id=`qsub -W depend=${SERP_DEPENDENCIES} -o $log_path -j oe $script_path`
        echo $job_id >> $SETUP_LOG
}
						
# Get run name, run date and flow cell ID

SEQRUN_NAME=`basename $INPUT_SEQRUN_DIR`
SEQRUN_DATE=`echo $SEQRUN_NAME | perl -e 'while(<>){ if(/^(\d{2})(\d{2})(\d{2})_/){ print "20$1-$2-$3"; }}'`;
FLOWCELL_ID=`echo $SEQRUN_NAME | cut -f4 -d '_' | perl -e '$prefix=<>; chomp($prefix); if(!($prefix =~ /-/)){ $prefix=~s/^[AB]//; } print $prefix'`
CUSTOMERS_RUNS_FILE=$INPUT_SEQRUN_DIR/customerInfo.csv

# Goto seqrun dir
cd $INPUT_SEQRUN_DIR

msg="started script in hpc for $SEQRUN_NAME"
res=`echo "curl $SLACK_URL -X POST $SLACK_OPT -d 'token'='$SLACK_TOKEN' -d 'text'='$msg'"|sh`

# Creates deployment results structure on eliot webserver
while read row
do
        project_tag=`echo $row|cut -d ',' -f1`

        # Checks if the project directory already exists in the web server
	if ssh $DEPLOYMENT_SERVER "[ -d /$DEPLOYMENT_PATH/$project_tag ]" < /dev/null ;then
               	msg="directory $DEPLOYMENT_PATH/$project_tag exists, aborting process"
                res=`echo "curl $SLACK_URL -X POST $SLACK_OPT -d 'token'='$SLACK_TOKEN' -d 'text'='$msg'"|sh`

	else
		# Creates password proctected project_tag dir
		msg="directory $DEPLOYMENT_PATH/$project_tag does not exist. Creates password proctected access"
                res=`echo "curl $SLACK_URL -X POST $SLACK_OPT -d 'token'='$SLACK_TOKEN' -d 'text'='$msg'"|sh`
		ssh $DEPLOYMENT_SERVER "mkdir -m 775 -p $DEPLOYMENT_PATH/$project_tag" < /dev/null
	fi

	# Added files for secure access
        project_usr=`echo $row|cut -d ',' -f3`
        project_passwd=`echo $row|cut -d ',' -f4`
	cp $HTACCESS_TML $HTACCESS
	cp $HTPASSWD_TML ${HTPASSWD}.$project_tag
 
        msg="created htaccess files for user $project_usr"
        res=`echo "curl $SLACK_URL -X POST $SLACK_OPT -d 'token'='$SLACK_TOKEN' -d 'text'='$msg'"|sh`

	# Configure .htaccess
	sed -i -e "s/#project_tag/$project_tag/" $HTACCESS
	sed -i -e "s/#customerUsername/$project_usr/" $HTACCESS
	scp $HTACCESS $DEPLOYMENT_SERVER:$DEPLOYMENT_PATH/$project_tag
	scp $HTPASSWD.${project_tag} $DEPLOYMENT_SERVER:$DEPLOYMENT_PATH/$project_tag/$HTPASSWD < /dev/null
	ssh $DEPLOYMENT_SERVER "chmod 775 $DEPLOYMENT_PATH/$project_tag/$HTACCESS" < /dev/null
	ssh $DEPLOYMENT_SERVER "chmod 644 $DEPLOYMENT_PATH/$project_tag/$HTPASSWD" < /dev/null
	ssh $DEPLOYMENT_SERVER "cd $DEPLOYMENT_PATH/$project_tag;htpasswd -bm .htpasswd $project_usr $project_passwd" < /dev/null

        msg="set ftp access for user $project_usr"
        res=`echo "curl $SLACK_URL -X POST $SLACK_OPT -d 'token'='$SLACK_TOKEN' -d 'text'='$msg'"|sh`

	# Remove local password protection file
	rm -f $HTACCESS
	rm -f ${HTPASSWD}.$project_tag
done <$CUSTOMERS_RUNS_FILE

# Extract sample sheet name from run name:
#HiSeq run: the sample sheet is named after the flowcell ID; the flowcell ID
#is the last token of the run name preceeded by A or B depending on wether the
#flow cell was run as flowcell A or B on the machine: <[A|B]><flowcell_id>.csv
#MiSeq run: MiSeq runs are detected by the hyphen in the last token of the run name;
#for MiSeq runs the sample sheet is named SampleSheet.csv 

PATH_RUN_DIR_BCL2FASTQ=$DATA_VOL_IGF/runs/seqrun/$SEQRUN_NAME/bcl2fastq/$TODAY
PATH_RESULTS_DIR_BCL2FASTQ=$DATA_VOL_IGF/results/seqrun/$SEQRUN_NAME/bcl2fastq/$TODAY				
PATH_RAWDATA_DIR=$DATA_VOL_IGF/rawdata

mkdir -m 770 -p $PATH_RUN_DIR_BCL2FASTQ
chmod -R 770 $DATA_VOL_IGF/runs/seqrun/$SEQRUN_NAME

# Goto BCl2FAST dir
cd $PATH_RUN_DIR_BCL2FASTQ

#we need a bcl2fastq job-list file for split_Fastq_dependencies, but MOST IMPORTANTLY, knowing the lane that belonged to a certain bcl2fastq job enables
#us to know which samples are in that lane; i.e, correspond bcl2fast dependency with the respective samples

# Job ID lisr for split fastq dependencies
BCL2FASTQ_JOB_ID_LIST=$PATH_RUN_DIR_BCL2FASTQ/bcl2fastq.$SEQRUN_NAME.job_id_list.csv
echo -n "" > $BCL2FASTQ_JOB_ID_LIST	


# BCL2FASTQ RUNS
################

# Get lanes
LANES=`cut -f1 -d ',' $INPUT_SEQRUN_DIR/SampleSheet.csv | perl -e 'while(<>){ if(/\[Data\]/){ $_=<>; if(/^Lane/){ while(<>){ print; }} else { print "1\n"; } }}' | sort | uniq`

## Convert sample sheet
dos2unix $INPUT_SEQRUN_DIR/SampleSheet.csv

PATH_SAMPLE_SHEET=$INPUT_SEQRUN_DIR/SampleSheet.csv
PATH_SAMPLE_SHEET_REFORMATTED=$PATH_RUN_DIR_BCL2FASTQ/$FLOWCELL_ID.csv

## Samplesheet reformat
python $BASE_PYTHON_DIR/scripts/SampleSheet/reformatSampleSheet.py -i $PATH_SAMPLE_SHEET -o $PATH_SAMPLE_SHEET_REFORMATTED -f $INPUT_SEQRUN_DIR/RunInfo.xml
retval=$?
if [ "$retval" -ne 0 ]; then
  msg="got error while running samplesheet reformat script, aborting process"
  res=`echo "curl $SLACK_URL -X POST $SLACK_OPT -d 'token'='$SLACK_TOKEN' -d 'text'='$msg'"|sh`
  exit 1
fi

## Check RunInfo if it is Single-Read or Paired-End Sequencing RUN 
pairedEnd=`cat $INPUT_SEQRUN_DIR/RunInfo.xml | grep "Read Number=\"4\"" | wc -l`

## Get sequencing type for following mapping
sequence_type=`echo $PATH_SAMPLE_SHEET_REFORMATTED | cut -f4 -d ',' | cut -f3 -d ':' | sort | uniq`
echo "sequence_type=$sequence_type"

## Create the appropriate index for lane statistics
cp $TEMPLATE_PATH/lanes.htm $PATH_RUN_DIR_BCL2FASTQ/index.html
chmod 770 $PATH_RUN_DIR_BCL2FASTQ/index.html

# Removing previous sub samplesheets
rm -f ${PATH_SAMPLE_SHEET_REFORMATTED}_{1..8}_*

## Generate current sub samplesheets
###################################
python $BASE_PYTHON_DIR/scripts/SampleSheet/divide_samplesheet.py --samplesheet_file $PATH_SAMPLE_SHEET_REFORMATTED --output_dir $PATH_RUN_DIR_BCL2FASTQ

retval=$?
if [ "$retval" -ne 0 ]; then
  msg="got error while generating sub samplesheets, aborting process"
  res=`echo "curl $SLACK_URL -X POST $SLACK_OPT -d 'token'='$SLACK_TOKEN' -d 'text'='$msg'"|sh`
  exit 1
fi

## Run BCL2FASTQ per lane
########################
for LANE in $LANES
do
	for SampleSheet in `ls --color=never ${PATH_SAMPLE_SHEET_REFORMATTED}_${LANE}_*`
	do
		lane_idx_length=`echo $SampleSheet | xargs -i basename {} | cut -d "_" -f2,3`
		sed -i -e "s/#addRow/<br> <li> LANE ${mylane} <ul> <li><a href=lane${lane_idx_length}\/index.html>All<\/a><\/li> <li><a href=lane${lane_idx_length}\/>Demultiplex_Stats<\/a><\/li> <\/ul> <\/li>\n#addRow/" $PATH_RUN_DIR_BCL2FASTQ/index.html 
                adapter_type=''
                mixedIndexLanes=''
		submitbcl2fastqJobs $INPUT_SEQRUN_DIR $SampleSheet $lane_idx_length $adapter_type $mixedIndexLanes
	done;
done
sed -i -e "s/#addRow//" $PATH_RUN_DIR_BCL2FASTQ/index.html 

# cat ${PATH_SAMPLE_SHEET_REFORMATTED}_*_* | sort -n | uniq  > $PATH_SAMPLE_SHEET_REFORMATTED

# DEPLOYS FASTQ ON IRODS
########################
submitIrodsDeployFastq $PATH_SAMPLE_SHEET_REFORMATTED

# FASTQC RUNS
#############
submitfastqcJobs $PATH_SAMPLE_SHEET_REFORMATTED

# POPULATE DB
##############
#popolateDB

# MAPPING RUNS
##############
#submitMappingJob $PATH_SAMPLE_SHEET_REFORMATTED

