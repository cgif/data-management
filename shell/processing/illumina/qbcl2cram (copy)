#!/bin/bash
#
# sets up directory structure and generates, configures and submits
# scripts to run bcl2fastq conversion, generate fastqc reports, split fastq files(bwa), and carry out bwa mapping, on an Illumnia run folder
#

#CONFIGURATION
##############

#now
NOW="date +%Y-%m-%d%t%T%t"

#today
TODAY=`date +%Y-%m-%d`

#returns absolute path to qfastqc directory, not changing your current directory
BASEDIR="$( cd "$( dirname "$0" )" && pwd )"
DATA_VOL_IGF=/project/tgu
DEPLOYMENT_SERVER=eliot.med.ic.ac.uk
DEPLOYMENT_BASE_DIR=/www/html/report
QUEUE=pqcgi
WALLTIME_HOURS_PER_JOB=24
TMP_SPACE_GB=100
THREADS_PER_JOB=2
USAGE="$BASEDIR/qbcl2fastq.usage"			##write a proper usage


FASTQC_SCRIPT_DIR=$BASEDIR/../../../../workflows/shell/pre_processing/fastqc
WORKFLOWS_RESOURCES_DIR=$BASEDIR/../../../../workflows/shell/resources

GROUP_VOL_CGI=/groupvol/cgi
BWA_SCRIPTS_DIR=$BASEDIR/../../../../workflows/shell/mapping/bwa
SPLIT_FASTQ_SCRIPT_DIR=$BASEDIR/../../../../workflows/shell/mapping/bwa/

SPECIES=hsapiens
ASSEMBLY=hs37d5
SEQUENCE_TYPE=dna



SAMTOOLS_VERSION_OVERALL=1.1
BWA_VERSION_OVERALL=0.7.5a




#COMMAND LINE ARGS
##################

while getopts "i:s:a:t:h" option; do
case "$option" in
	i) INPUT_SEQRUN_DIR="$OPTARG";;
	s) SPECIES="$OPTARG";;
	a) ASSEMBLY="$OPTARG";;
	t) SEQUENCE_TYPE="$OPTARG";;
	h) cat "$USAGE"; exit 0;;
	[?]) cat "$USAGE"; exit 1;;
esac
done

#check if required arguments are missing
if [ -z $INPUT_SEQRUN_DIR ]
then
	cat "$USAGE"
	exit 1
fi

REFERENCE_FASTA=$DATA_VOL_IGF/resources/reference/fasta/eukaryote/$SPECIES/$ASSEMBLY/$ASSEMBLY.fa
REFERENCE_DICT=$DATA_VOL_IGF/resources/reference/dict/eukaryote/$SPECIES/$ASSEMBLY/$ASSEMBLY.dict
REFERENCE_INDEX_DIR=$DATA_VOL_IGF/resources/reference/index/bwa/eukaryote/$SPECIES/$ASSEMBLY/



if [[ $SEQUENCE_TYPE = "rna" ]]
then
	REFERENCE_INDEX_PREFIX=$DATA_VOL_IGF/resources/reference/index/bowtie2/eukaryote/$SPECIES/$ASSEMBLY/$ASSEMBLY
fi





#FUNCTIONS
##########

#creates job scripts
function submitbcl2fastqJobs {
	
	#bcl2Fastq variables
	local seqrun_directory=$1	#we could obtain this seqrun_directory the global variable INPUT_PATH
	local lane=$2



	#BCL2FASTQ CONVERSION
	#####################
	
	echo -n $lane >> $BCL2FASTQ_JOB_ID_LIST

	local bcl2fastq_script=$PATH_RUN_DIR_BCL2FASTQ/bcl2Fastq.$SEQRUN_NAME.${lane}_${read}.sh
	cp $BASEDIR/bcl2fastq.sh $bcl2fastq_script
	chmod 770 $bcl2fastq_script

	sed -i -e "s/#walltimeHours/$WALLTIME_HOURS_PER_JOB/" $bcl2fastq_script
	sed -i -e "s/#threads/$THREADS_PER_JOB/" $bcl2fastq_script
	sed -i -e "s/#runName/$SEQRUN_NAME/" $bcl2fastq_script
	sed -i -e "s/#lane/$lane/" $bcl2fastq_script
	sed -i -e "s/#tmpSpace/$TMP_SPACE_GB/" $bcl2fastq_script
	sed -i -e "s/#pathSeqRunDir/${seqrun_directory//\//\\/}/" $bcl2fastq_script
	sed -i -e "s/#dataVolIgf/${DATA_VOL_IGF//\//\\/}/" $bcl2fastq_script

	local log_path=`echo $bcl2fastq_script | perl -pe 's/\.sh/\.log/g'`
	echo "`$NOW`submitting bcl2fastq job:" 
	echo "`$NOW`bcl2Fastq.$SEQRUN_NAME.$lane.sh"
	echo -n "`$NOW`"				
	
	
	echo "qsub -q $QUEUE -o $log_path $bcl2fastq_script"
	local job_id=`qsub -o $log_path $bcl2fastq_script`	
	echo ",$job_id" >> $BCL2FASTQ_JOB_ID_LIST			

}


function submitfastqcJobs {			#for this step, u can't do parallelisation according to lane, as the file are not ordered to lanes: just run the function on the already generated fastq files from the earlier function

	local seqrun_directory=$1

	local flowcell_id=`echo $SEQRUN_NAME | cut -f4 -d '_' | perl -e '$flowcell_id=<>; $flowcell_id=substr($flowcell_id,1,9); print "$flowcell_id\n"'`

	#create directory structure for each project in sample sheet

	for project in `sed 1d $seqrun_directory/$flowcell_id.csv| cut -d ',' -f10  | perl -e 'while(<>){ s/\s//g; print "$_\n";}' | sort | uniq`
	do
	
		#create and set permissions for analysis project parent directory
		mkdir -m 770 -p $DATA_VOL_IGF/analysis/$project/fastqc
	
		#create and set permissions for results project parent directory
		mkdir -m 770 -p $DATA_VOL_IGF/results/$project/fastqc

		#create and set permissions for multisample analysis directory			
		mkdir -m 770 -p $DATA_VOL_IGF/analysis/$project/fastqc/multisample		

		mkdir -m 770 -p $DATA_VOL_IGF/analysis/$project/fastqc/multisample/run	
		local ms_analysis_dir=$DATA_VOL_IGF/analysis/$project/fastqc/multisample
		
		#create and set permissions for multisample results directory
		mkdir -m 770 -p $DATA_VOL_IGF/results/$project/fastqc/multisample

		local job_id_list=$ms_analysis_dir/job_id_list.txt
		echo -n "" > $job_id_list
		chmod 660 $job_id_list	
		#create summary directory on deployment server
		local fastqc_summary_deployment=$DEPLOYMENT_BASE_DIR/project/$project/fastqc
		ssh $DEPLOYMENT_SERVER "mkdir -p -m 775 $fastqc_summary_deployment"
		scp -r ${BASEDIR}/../../resources/images/error.png $DEPLOYMENT_SERVER:$fastqc_summary_deployment/ > /dev/null 2>&1
		scp -r ${BASEDIR}/../../resources/images/tick.png $DEPLOYMENT_SERVER:$fastqc_summary_deployment/ > /dev/null 2>&1
		scp -r ${BASEDIR}/../../resources/images/warning.png $DEPLOYMENT_SERVER:$fastqc_summary_deployment/ > /dev/null 2>&1
		ssh $DEPLOYMENT_SERVER "chmod -R 664 $fastqc_summary_deployment/*png" > /dev/null 2>&1
		ssh $DEPLOYMENT_SERVER "chmod -R 664 $fastqc_summary_deployment/*png"

	done

	while read row
	do

		local lane=`echo $row | cut -f1 -d ','`
		local bcl2fastq_job_id=`echo $row | cut -f2 -d ','`
		
			
		local rowcount=0
		while read line
		do
			
			#skip sample sheet header
			rowcount=$(( $rowcount + 1 )) 
			if [ "$rowcount" -eq "1" ]
			then
				continue
			fi

			#skip samples not in current lane...
			local sample_lane=`echo $line | cut -f2 -d ',' | perl -pe 's/\s//g'`
			if [ "$sample_lane" -ne "$lane" ]
			then
				continue
			fi

			#..for samples in current lane...
			local sample_name=`echo $line | cut -f3 -d ',' | perl -pe 's/\s//g'`
			local index=`echo $line | cut -f5 -d ',' | perl -pe 's/\s//g'`
			local project_name=`echo $line | cut -f10 -d ',' | perl -pe 's/\s//g'`			
							
			local path_reads_dir=$DATA_VOL_IGF/rawdata/$project_name/fastq/$sample_name
			local fastq_read1=${SEQRUN_NAME}_${index}_L00${lane}_R1_001.fastq.gz
			local fastq_read2=${SEQRUN_NAME}_${index}_L00${lane}_R2_001.fastq.gz

			#create output directory for the QC reports for each file
			echo "`$NOW`creating output directory for QC reports of sample $sample_name "
			local project_analysis_dir=$DATA_VOL_IGF/analysis/$project_name/fastqc
			local path_run_dir=$project_analysis_dir/$sample_name/run
			local project_result_dir=$DATA_VOL_IGF/results/$project_name/fastqc
			local qc_report_outputdir=$project_result_dir/$sample_name
			mkdir -m 770 -p $path_run_dir
			mkdir -m 770 -p $qc_report_outputdir
			
			local job_id_list=$ms_analysis_dir/job_id_list.txt

			#create deployment directories for the QC reports for each file
			local fastqc_deployment_path=$DEPLOYMENT_BASE_DIR/project/$project_name/fastqc/$sample_name
			local fastqc_summary_deployment=$DEPLOYMENT_BASE_DIR/project/$project_name/fastqc
	
			#create fastqc script from template
			echo "`$NOW`creating and submitting job scripts for QC of fastq files for sample $sample_name in lane $lane"
		
			#handling each fastq file, in each sample directory
									
			local fastQC_script_path=$path_run_dir/fastQC.$fastq_read1.sh	
			cp $FASTQC_SCRIPT_DIR/fastQC.sh $fastQC_script_path
			chmod 770 $fastQC_script_path
		
			#configure fastqc script
			sed -i -e "s/#pathReadsFastq/${path_reads_dir//\//\\/}/" $fastQC_script_path
			sed -i -e "s/#fastqRead1/${fastq_read1//\//\\/}/" $fastQC_script_path
			sed -i -e "s/#fastqRead2/${fastq_read2//\//\\/}/" $fastQC_script_path
			sed -i -e "s/#pathQcReportDir/${qc_report_outputdir//\//\\/}/" $fastQC_script_path
			sed -i -e "s/#deploymentServer/${DEPLOYMENT_SERVER//\//\\/}/" $fastQC_script_path	
  			sed -i -e "s/#deploymentPath/${fastqc_deployment_path//\//\\/}/" $fastQC_script_path	
			sed -i -e "s/#summaryPath/${fastqc_summary_deployment//\//\\/}/" $fastQC_script_path

		  	#submit job 
		  	log_output_path=`echo $fastQC_script_path | perl -pe 's/\.sh/\.log/g'`
			#for testing
			echo "qsub -q $QUEUE -W depend=afterok:$bcl2fastq_job_id -o $log_output_path $fastQC_script_path"
#		  	job_id=`qsub -q $QUEUE -W depend=afterok:$bcl2fastq_job_id -o $log_output_path $fastQC_script_path`
			echo "`$NOW`Read pair: $fastq_read1 AND $fastq_read2"		
			echo "`$NOW`Job ID:$job_id"
			echo -e "$job_id" >> $job_id_list				

		done <$seqrun_directory/$flowcell_id.csv

	done <$BCL2FASTQ_JOB_ID_LIST

	for project in `sed 1d $seqrun_directory/$flowcell_id.csv| cut -d ',' -f10  | perl -e 'while(<>){ s/\s//g; print "$_\n";}' | sort | uniq`
	do

		echo "`$NOW`creating and submitting job script for summary of results"
		#create summary script from template

		local ms_analysis_dir=$DATA_VOL_IGF/analysis/$project/fastqc/multisample
		local ms_result_dir=$DATA_VOL_IGF/results/$project/fastqc/multisample
		local summary_path=$ms_analysis_dir/run/summary.$project.pl
		cp $FASTQC_SCRIPT_DIR/summary_fastqc.pl $summary_path
		chmod 770 $summary_path

		local path_fastq_dir=$DATA_VOL_IGF/results/$project/fastq
		local project_analysis_dir=$DATA_VOL_IGF/analysis/$project/fastqc
		local project_result_dir=$DATA_VOL_IGF/results/$project/fastqc
		local fastqc_summary_deployment=$DEPLOYMENT_BASE_DIR/project/$project/fastqc

		#configure summary script, it will be executed from fastqc script
		sed -i -e "s/#pathReadsFastq/${path_fastq_dir//\//\\/}/" $summary_path
		sed -i -e "s/#pathAnalysisDir/${project_analysis_dir//\//\\/}/" $summary_path
		sed -i -e "s/#pathReportsDir/${project_result_dir//\//\\/}/" $summary_path
		sed -i -e "s/#pathMSReportsDir/${ms_result_dir//\//\\/}/" $summary_path
		sed -i -e "s/#deploymentServer/$DEPLOYMENT_SERVER/" $summary_path
		sed -i -e "s/#summaryDeployment/${fastqc_summary_deployment//\//\\/}/" $summary_path

		#summary is on hold until fastqc runs are completed 
		#collect fastqc job ids for dependency variable
		local job_id_list=$ms_analysis_dir/job_id_list.txt
		local summary_job_dependency="afterany"
		for job_id in `grep 'cx1' $job_id_list`
		do

			job_id=`basename $job_id .cx1b`
			summary_job_dependency="$summary_job_dependency:$job_id"

		done

		#submit job 
		local log_output_path=`echo $summary_path | perl -pe 's/\.pl/\.log/g'`
		#for testing
		echo "qsub -q $QUEUE -W depend=$summary_job_dependency -o $log_output_path -j oe $summary_path"
		local job_id=`qsub -q $QUEUE -W depend=$summary_job_dependency -o $log_output_path -j oe $summary_path`
		echo "`$NOW`Job ID:$job_id"

	done

}









#creates job scripts
function submitBWAMEMJobs {

	local seqrun_directory=$1
	local reads_per_chunk=$2
	local PATH_REFERENCE_FASTA=$3

	local PATTERN_READ_1='_R1_'
	local PATTERN_READ_2='_R2_'		


	

	#mkdir -m 770 -p $PATH_RUN_DIR



	local PATH_TMP_DIR=$PATH_RUN_DIR/tmp
			
	
	#mkdir -m 770 -p $PATH_MAPPING_DIR
	#mkdir -m 770 -p $PATH_TMP_DIR
		
	echo "`$NOW`setting up BWA mapping run(s)... "


	local flowcell_id=`echo $SEQRUN_NAME | cut -f4 -d '_' | perl -e '$flowcell_id=<>; $flowcell_id=substr($flowcell_id,1,9); print "$flowcell_id\n"'`

	while read row
	do
		local lane=`echo $row | cut -f1 -d ','`
		local bcl2fastq_job_id=`echo $row | cut -f2 -d ','`			
	
		local rowcount=0
		while read line
		do
			
			#skip sample sheet header
			rowcount=$(( $rowcount + 1 )) 
			if [ "$rowcount" -eq "1" ]
			then
				continue
			fi

			#skip samples not in current lane...
			local sample_lane=`echo $line | cut -f2 -d ',' | perl -pe 's/\s//g'`
			if [ "$sample_lane" -ne "$lane" ]
			then
				continue
			fi

			#..for samples in current lane...
			local sample_name=`echo $line | cut -f3 -d ',' | perl -pe 's/\s//g'`
			local index=`echo $line | cut -f5 -d ',' | perl -pe 's/\s//g'`
			local project_name=`echo $line | cut -f10 -d ',' | perl -pe 's/\s//g'`			
							
			local path_reads_dir=$DATA_VOL_IGF/rawdata/$project_name/fastq/$sample_name
			local fastq_read1=${SEQRUN_NAME}_${index}_L00${lane}_R1_001.fastq.gz
			local fastq_read2=${SEQRUN_NAME}_${index}_L00${lane}_R2_001.fastq.gz



			#get reference FASTA file names
			REFERENCE_FASTA_NAME=`basename $PATH_REFERENCE_FASTA .gz` 			##****is this absolutely necessary..?

			#get reference FASTA directory path
			PATH_REFERENCE_FASTA_DIR=`dirname $PATH_REFERENCE_FASTA`
		
			#PATH_REFERENCE_FASTA_NO_EXT=$PATH_REFERENCE_FASTA_DIR/$REFERENCE_FASTA_NAME
			PATH_REFERENCE_FASTA_NO_EXT=$PATH_REFERENCE_FASTA
	
			echo "`$NOW`creating and submitting job scripts:"

			#create directory structure for merged bam files; each file will contain the same reads as in the original fastq file
			local PATH_RESULTS_DIR=$DATA_VOL_IGF/results/$project_name/BWA/mapping/$sample_name
			echo "`$NOW`creating BWA results directory $PATH_RESULTS_DIR"
			mkdir -m 770 -p $PATH_RESULTS_DIR

			local PATH_MAPPING_DIR=$DATA_VOL_IGF/analysis/$project_name/BWA/mapping/$sample_name
			echo "`$NOW`creating BWA mapping directory $PATH_MAPPING_DIR"
			mkdir -m 770 -p $PATH_MAPPING_DIR

			#directory for the job scripts
			local PATH_SCRIPTS_DIR=$DATA_VOL_IGF/analysis/$project_name/BWA/scripts 
			echo "`$NOW`creating BWA mapping directory $PATH_SCRIPTS_DIR"
			mkdir -m 770 -p $PATH_SCRIPTS_DIR

			#temporary directory for splitfastq results
			SPLITFASTQ_OUTPUT_DIR=$DATA_VOL_IGF/analysis/$project_name/BWA/tmp/$sample_name/${fastq_read1}_split	#TEMPORARY DIRECTORY	replaced tmp
			echo "`$NOW`creating split fastq temporary directory $SPLITFASTQ_OUTPUT_DIR"
			mkdir -m 770 -p $SPLITFASTQ_OUTPUT_DIR

			########################################
			#submit splitting jobs
			splitfastq_job_id=afterok

			for FASTQ in $path_reads_dir/$fastq_read1 $path_reads_dir/$fastq_read2
			do
		
				FASTQ_NAME=`basename $FASTQ .gz`
			
				#calculate required temp space
				FILE_SIZE_KB=20000000

				if [[ "$FILE_SIZE_KB" -ne "0" ]]
				then
					FILE_SIZE_MB=$(( $FILE_SIZE_KB / 1024 ))
					TMP_SPACE_MB=$(( $FILE_SIZE_KB * 2 ))
				fi

				SCRIPT_PATH=$PATH_SCRIPTS_DIR/splitFastq.$FASTQ_NAME.sh
				cp $BWA_SCRIPTS_DIR/splitFastq.sh $SCRIPT_PATH
				chmod 770 $SCRIPT_PATH

				sed -i -e "s/#walltimeHours/$SPLITFASTQ_WALLTIME_HOURS/" $SCRIPT_PATH  
				sed -i -e "s/#threads/$SPLITFASTQ_THREADS/" $SCRIPT_PATH
				sed -i -e "s/#tmpSpace/$SPLITFASTQ_THREADS/" $SCRIPT_PATH
				sed -i -e "s/#inputFastq/${FASTQ//\//\\/}/" $SCRIPT_PATH
				sed -i -e "s/#outputDir/${SPLITFASTQ_OUTPUT_DIR//\//\\/}/" $SCRIPT_PATH
				sed -i -e "s/#readsPerChunk/$reads_per_chunk/" $SCRIPT_PATH

				LOG_PATH=`echo $SCRIPT_PATH | perl -pe 's/\.sh/\.log/g'`

				echo "`$NOW`submitting fastq splitting job:" 
				echo "`$NOW`splitFastq.$FASTQ_NAME.sh" 
				echo -n "`$NOW`"

				echo qsub -q $QUEUE -W depend=afterok:$bcl2fastq_job_id -o $LOG_PATH $SCRIPT_PATH
				#JOB_ID=`qsub -q $QUEUE -o $LOG_PATH $SCRIPT_PATH`
				#JOB_ID=`qsub -q $QUEUE -W depend=afterok:$bcl2fastq_job_id -o $LOG_PATH $SCRIPT_PATH` 
				echo $JOB_ID 

				splitfastq_job_id="$splitfastq_job_id:$JOB_ID"

			done;

			#######################

			SETUP_LOG=$PATH_SCRIPTS_DIR/bwa_map_setup.txt	#NOT OTHERWISE USED; IT JUST HAPPENS TO BE A REQUIRED PARAMETER IN THE submitMapping.sh SCRIPT 
			echo -n "" > $SETUP_LOG	

			local PATH_RUN_DIR=$DATA_VOL_IGF/analysis/$project_name/BWA/
			local BWA_SUMMARY_RESULTS=$DEPLOYMENT_BASE_DIR/$project_name/bwa/

			for FASTQ in $path_reads_dir/$fastq_read1 $path_reads_dir/$fastq_read2
			do

				INPUT_FASTQ_FILE=`basename $FASTQ .gz`

				#create summary directory on deployment server
				local bwamapping_summary_deployment=$DEPLOYMENT_BASE_DIR/project/$project/bwa
				OUTPUT_PREFIX=$INPUT_FASTQ_FILE.vs.$REFERENCE_FASTA_NAME
	
				bwa_mapping_script=$PATH_SCRIPTS_DIR/submitMappingScript.$OUTPUT_PREFIX.sh
				cp $BWA_SCRIPTS_DIR/submitMappingScript.sh $bwa_mapping_script
				chmod 770 $bwa_mapping_script
	
	
				sed -i -e "s/#baseDir/${BASEDIR//\//\\/}/" $bwa_mapping_script				#the parameter is used in a rather starnge context; check again
				sed -i -e "s/#setupLog/${SETUP_LOG//\//\\/}/" $bwa_mapping_script
				sed -i -e "s/#pathTmpDir/${SPLITFASTQ_OUTPUT_DIR//\//\\/}/" $bwa_mapping_script
				sed -i -e "s/#fastqRead1NoExt/$INPUT_FASTQ_FILE/" $bwa_mapping_script
				sed -i -e "s/#patternRead1/$PATTERN_READ_1/" $bwa_mapping_script
				sed -i -e "s/#patternRead2/$PATTERN_READ_2/" $bwa_mapping_script
				sed -i -e "s/#tmpSpace/$TMP_SPACE_GB/" $bwa_mapping_script
				sed -i -e "s/#queue/$QUEUE/" $bwa_mapping_script
				sed -i -e "s/#pathScriptsDir/${PATH_SCRIPTS_DIR//\//\\/}/" $bwa_mapping_script
				sed -i -e "s/#pathResultsDir/${PATH_RESULTS_DIR//\//\\/}/" $bwa_mapping_script
				sed -i -e "s/#pathMappingDir/${PATH_MAPPING_DIR//\//\\/}/" $bwa_mapping_script
				sed -i -e "s/#pathReferenceFastaNoExt/${PATH_REFERENCE_FASTA_NO_EXT//\//\\/}/" $bwa_mapping_script
				sed -i -e "s/#pathRunDir/${PATH_RUN_DIR//\//\\/}/" $bwa_mapping_script
				sed -i -e "s/#today/$TODAY/" $bwa_mapping_script
				sed -i -e "s/#deploymentServer/$DEPLOYMENT_SERVER/" $bwa_mapping_script
				sed -i -e "s/#summaryDeployment/${bwamapping_summary_deployment//\//\\/}/" $bwa_mapping_script
				sed -i -e "s/#summaryResults/${BWA_SUMMARY_RESULTS//\//\\/}/" $bwa_mapping_script
				sed -i -e "s/#samtoolsVersion/$SAMTOOLS_VERSION_OVERALL/" $SCRIPT_PATH
				sed -i -e "s/#bwaVersion/$BWA_VERSION_OVERALL/" $SCRIPT_PATH
				sed -i -e "s/#pathReferenceSeqDict/${REFERENCE_DICT//\//\\/}/" $SCRIPT_PATH
				sed -i -e "s/#pathReferenceIndexDir/${REFERENCE_INDEX_DIR//\//\\/}/" $SCRIPT_PATH




				bwa_log_path=`echo $bwa_mapping_script | perl -pe 's/\.sh/\.log/g'`
	
				bwa_map_job_id_list=$PATH_SCRIPTS_DIR/bwa_map_jobs.txt
				echo -n "" >> $bwa_map_job_id_list
			

				echo "`$NOW`submitting submitMappingScript job for $fastq_read1 AND $fastq_read2 :" 
				echo "`$NOW`submitMappingScript.$OUTPUT_PREFIX.sh" 
					
				echo "qsub -q $QUEUE -W depend=afterok:$splitfastq_job_id -o $bwa_log_path $bwa_mapping_script"		
				job_id=`qsub -q $QUEUE -o $bwa_log_path $bwa_mapping_script`
				#job_id=`qsub -q $QUEUE -W depend=$splitfastq_job_id -o $bwa_log_path $bwa_mapping_script`
				echo "`$NOW`Job ID:$job_id" 
				echo -e "$job_id" >> $bwa_map_job_id_list	

			done
			
		done <$seqrun_directory/$flowcell_id.csv

	done <$BCL2FASTQ_JOB_ID_LIST
	
	echo "`$NOW`All done!"
}

						










SEQRUN_NAME=`basename $INPUT_SEQRUN_DIR`
PATH_RUN_DIR_BCL2FASTQ=$DATA_VOL_IGF/analysis/seqrun/bcl2fastq/2014-10-08				#changed $TODAY here to the date which actually exists in the folder
#mkdir -p $PATH_RUN_DIR_BCL2FASTQ


BCL2FASTQ_JOB_ID_LIST=$PATH_RUN_DIR_BCL2FASTQ/bcl2fastq.$SEQRUN_NAME.job_id_list.txt




# BCL2FASTQ RUNS
#############
#for LANE in {1..8}
#do
#	submitbcl2fastqJobs $INPUT_SEQRUN_DIR $LANE
#done

# FASTQC RUNS
#############
#submitfastqcJobs $INPUT_SEQRUN_DIR

# BWA RUNS
#############
reads_pc=10000000
submitBWAMEMJobs $INPUT_SEQRUN_DIR $reads_pc $REFERENCE_FASTA

exit 1









##Problem in splitFastq.sh script; Software 'pigz' is on group-vol/cgi on which i don't have permissions













