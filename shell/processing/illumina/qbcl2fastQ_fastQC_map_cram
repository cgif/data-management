#!/bin/bash
#
# sets up directory structure and generates, configures and submits
# scripts to run bcl2fastq conversion, generate fastqc reports, split fastq files(bwa), and carry out bwa mapping, on an Illumnia run folder
#

#CONFIGURATION
##############

#now
NOW="date +%Y-%m-%d%t%T%t"

#today
TODAY=`date +%Y-%m-%d`

#returns absolute path to qfastqc directory, not changing your current directory
BASEDIR="$( cd "$( dirname "$0" )" && pwd )"
DATA_VOL_IGF=/project/tgu
DEPLOYMENT_SERVER=eliot.med.ic.ac.uk
DEPLOYMENT_BASE_DIR=/www/html/report
QUEUE=pqcgi
WALLTIME_HOURS_PER_JOB=24
TMP_SPACE_GB=100
THREADS_PER_JOB=2
USAGE="$BASEDIR/qbcl2fastq.usage"			##write a proper usage


pattern_read1='_R1_'
pattern_read1='_R2_'


FASTQC_SCRIPT_DIR=$BASEDIR/../../../../workflows/shell/pre_processing/fastqc


GROUP_VOL_CGI=/groupvol/cgi
BWA_SCRIPTS_DIR=$BASEDIR/../../../../workflows/shell/mapping/bwa
SPLITFASTQ_WALLTIME_HOURS=72	#check that this much time is required
SPLITFASTQ_THREADS=4		#check that these many threads are required
SPLIT_FASTQ_SCRIPT_DIR=$BASEDIR/../../../../workflows/shell/mapping/bwa/
#BWA_SUMMARY_DEPLOYMENT=$DEPLOYMENT_BASE_DIR/$PROJECT/bwa/
BWA_SUMMARY_RESULTS=$GROUP_VOL_CGI/results/$PROJECT/bwa/summary





#COMMAND LINE ARGS
##################

while getopts "i:h" option; do
case "$option" in
	i) INPUT_SEQRUN_DIR="$OPTARG";;
	h) cat "$USAGE"; exit 0;;
	[?]) cat "$USAGE"; exit 1;;
esac
done

#check if required arguments are missing
if [ -z $INPUT_SEQRUN_DIR ]
then
	cat "$USAGE"
	exit 1
fi




#FUNCTIONS
##########

#creates job scripts
function submitbcl2fastqJobs {
	
	#bcl2Fastq variables
	local seqrun_directory=$1	#we could obtain this seqrun_directory the global variable INPUT_PATH
	local lane=$2

	#fastQC variables

	#bwa variables

											##u need to separate these functions;;;; 'submitFastqjobs' can not be called by a code within the same functions

	#BCL2FASTQ CONVERSION
	#####################
	
	echo -n $lane >> $BCL2FASTQ_JOB_ID_LIST

	for read in 1 2
	do

		local bcl2fastq_script=$PATH_RUN_DIR_BCL2FASTQ/bcl2Fastq.$SEQRUN_NAME.${lane}_${read}.sh
		cp $BASEDIR/bcl2fastq.sh $bcl2fastq_script
		chmod 770 $bcl2fastq_script
	
		sed -i -e "s/#walltimeHours/$WALLTIME_HOURS_PER_JOB/" $bcl2fastq_script
		sed -i -e "s/#threads/$THREADS_PER_JOB/" $bcl2fastq_script
		sed -i -e "s/#runName/$SEQRUN_NAME/" $bcl2fastq_script
		sed -i -e "s/#lane/$lane/" $bcl2fastq_script
		sed -i -e "s/#read/$read/" $bcl2fastq_script	
		sed -i -e "s/#tmpSpace/$TMP_SPACE_GB/" $bcl2fastq_script
		sed -i -e "s/#pathSeqRunDir/${seqrun_directory//\//\\/}/" $bcl2fastq_script
		sed -i -e "s/#dataVolIgf/${DATA_VOL_IGF//\//\\/}/" $bcl2fastq_script
	
		local log_path=`echo $bcl2fastq_script | perl -pe 's/\.sh/\.log/g'`
		echo "`$NOW`submitting bcl2fastq job:" 
		echo "`$NOW`bcl2Fastq.$SEQRUN_NAME.$lane.sh"
		echo -n "`$NOW`"				
		
		
		echo "qsub -q $QUEUE -o $log_path $bcl2fastq_script"
		local job_id=`qsub -o $log_path $bcl2fastq_script`	
		echo -n ",$job_id" >> $BCL2FASTQ_JOB_ID_LIST			
	
	done	

}


function submitfastqcJobs {			#for this step, u can't do parallelisation according to lane, as the file are not ordered to lanes: just run the function on the already generated fastq files from the earlier function

	local seqrun_directory=$1

	local flowcell_id=`echo $SEQRUN_NAME | cut -f4 -d '_' | perl -e '$flowcell_id=<>; $flowcell_id=substr($flowcell_id,1,9); print "$flowcell_id\n"'`

	#create directory structure for each project in sample sheet

	for project in `sed 1d $seqrun_directory/$flowcell_id.csv| cut -d ',' -f10  | perl -e 'while(<>){ s/\s//g; print "$_\n";}' | sort | uniq`
	do
	
		#create and set permissions for analysis project parent directory
		mkdir -m 770 -p $DATA_VOL_IGF/analysis/$project/fastqc
	
		#create and set permissions for results project parent directory
		mkdir -m 770 -p $DATA_VOL_IGF/results/$project/fastqc

		#create and set permissions for multisample analysis directory			
		mkdir -m 770 -p $DATA_VOL_IGF/analysis/$project/fastqc/multisample		

		mkdir -m 770 -p $DATA_VOL_IGF/analysis/$project/fastqc/multisample/run	
		local ms_analysis_dir=$DATA_VOL_IGF/analysis/$project/fastqc/multisample
		
		#create and set permissions for multisample results directory
		mkdir -m 770 -p $DATA_VOL_IGF/results/$project/fastqc/multisample

		local job_id_list=$ms_analysis_dir/job_id_list.txt
		echo -n "" > $job_id_list
		chmod 660 $job_id_list	
		#create summary directory on deployment server
		local fastqc_summary_deployment=$DEPLOYMENT_BASE_DIR/project/$project/fastqc
		scp -r ${BASEDIR}/../../resources/images/error.png $DEPLOYMENT_SERVER:$fastqc_summary_deployment/ > /dev/null 2>&1
		scp -r ${BASEDIR}/../../resources/images/tick.png $DEPLOYMENT_SERVER:$fastqc_summary_deployment/ > /dev/null 2>&1
		scp -r ${BASEDIR}/../../resources/images/warning.png $DEPLOYMENT_SERVER:$fastqc_summary_deployment/ > /dev/null 2>&1
		ssh $DEPLOYMENT_SERVER "chmod -R 664 $fastqc_summary_deployment/*png" > /dev/null 2>&1
	
	done

	while read row
	do

		local lane=`echo $row | cut -f1 -d ','`
		local bcl2fastq_job_id_read1=`echo $row | cut -f2 -d ','`
		local bcl2fastq_job_id_read2=`echo $row | cut -f3 -d ','`
			
	
		local rowcount=0
		while read line
		do
			
			#skip sample sheet header
			rowcount=$(( $rowcount + 1 )) 
			if [ "$rowcount" -eq "1" ]
			then
				continue
			fi

			#skip samples not in current lane...
			local sample_lane=`echo $line | cut -f2 -d ',' | perl -pe 's/\s//g'`
			if [ "$sample_lane" -ne "$lane" ]
			then
				continue
			fi

			#..for samples in current lane...
			local sample_name=`echo $line | cut -f3 -d ',' | perl -pe 's/\s//g'`
			local index=`echo $line | cut -f5 -d ',' | perl -pe 's/\s//g'`
			local project_name=`echo $line | cut -f10 -d ',' | perl -pe 's/\s//g'`			
			

			local fastq_read1_prefix=${SEQRUN_NAME}_${index}_L00${lane}_R1_001
			local fastq_read2_prefix=${SEQRUN_NAME}_${index}_L00${lane}_R2_001
			
			FASTQ_DIR=$DATA_VOL_IGF/rawdata/$project_name/fastq/$sample_name
			
		

				
			local path_reads_dir=$DATA_VOL_IGF/rawdata/$project_name/fastq/$sample_name
			local fastq_read1=$fastq_read1_prefix.fastq.gz
			local fastq_read2=$fastq_read2_prefix.fastq.gz

			#create output directory for the QC reports for each file
			echo "`$NOW`creating output directory for QC reports of sample $sample_name "
			local project_analysis_dir=$DATA_VOL_IGF/analysis/$project/fastqc
			local path_run_dir=$project_analysis_dir/$sample_name/run
			local project_result_dir=$DATA_VOL_IGF/results/$project/fastqc
			local qc_report_outputdir=$project_result_dir/$sample_name
			mkdir -m 770 -p $path_run_dir
			mkdir -m 770 -p $qc_report_outputdir
			
			local job_id_list=$ms_analysis_dir/job_id_list.txt

			#create deployment directories for the QC reports for each file
			local fastqc_deployment_path=$DEPLOYMENT_BASE_DIR/$project_name/fastqc/$sample_name
			local fastqc_summary_deployment=$DEPLOYMENT_BASE_DIR/$project_name/fastqc
	
			#create fastqc script from template
			echo "`$NOW`creating and submitting job scripts for QC of fastq files for sample $sample_name in lane $lane"
		
			#handling each fastq file, in each sample directory
	
			#check if mate file was found...
			if [ -z $fastq_read1 ] 											#script doesn't enter this loop because there are no fastQ 
			then
				#...if not skip fastq file
				echo "`$NOW`ERROR:read 1 fastq file $fastq_read1 not found. Skipped."   		
			
			elif [ -z $fastq_read2 ] 
			then
				#...if not skip fastq file
				echo "`$NOW`ERROR:read 2 fastq file $fastq_read1 not found. Skipped."   		

			else
								
				local fastQC_script_path=$path_run_dir/fastQC.$fastq_read1.sh	
				cp $FASTQC_SCRIPT_DIR/fastQC.sh $fastQC_script_path
				chmod 770 $fastQC_script_path
			
				#configure fastqc script
				sed -i -e "s/#pathReadsFastq/${path_reads_dir//\//\\/}/" $fastQC_script_path
				sed -i -e "s/#fastqRead1/${fastq_read1//\//\\/}/" $fastQC_script_path
				sed -i -e "s/#fastqRead2/${fastq_read2//\//\\/}/" $fastQC_script_path
				sed -i -e "s/#pathQcReportDir/${qc_report_outputdir//\//\\/}/" $fastQC_script_path
				sed -i -e "s/#deploymentServer/${DEPLOYMENT_SERVER//\//\\/}/" $fastQC_script_path	
	  			sed -i -e "s/#deploymentPath/${fastqc_deployment_path//\//\\/}/" $fastQC_script_path	
				sed -i -e "s/#summaryPath/${fastqc_summary_deployment//\//\\/}/" $fastQC_script_path

			  	#submit job 
			  	log_output_path=`echo $fastQC_script_path | perl -pe 's/\.sh/\.log/g'`
				#for testing
				echo "qsub -q $QUEUE -W depend=afterok:$bcl2fastq_job_id_read1:$bcl2fastq_job_id_read2 -o $log_output_path $fastQC_script_path"
				#job_id=`qsub -q $QUEUE -o $log_output_path $fastQC_script_path`
			  	job_id=`qsub -q $QUEUE -W depend=afterok:$bcl2fastq_job_id_read1:$bcl2fastq_job_id_read2 -o $log_output_path $fastQC_script_path`
				echo "`$NOW`Read pair: $fastq_read1 AND $fastq_read2"		
				echo "`$NOW`Job ID:$job_id"
				echo -e "$job_id" >> $job_id_list				
	
			fi
			
		done <$seqrun_directory/$flowcell_id.csv

	done <$BCL2FASTQ_JOB_ID_LIST
		

	local project_ms_result_dir=$DATA_VOL_IGF/results/$project/fastqc/multisample

	for project in `sed 1d $seqrun_directory/$flowcell_id.csv| cut -d ',' -f10  | perl -e 'while(<>){ s/\s//g; print "$_\n";}' | sort | uniq`
	do

		echo "`$NOW`creating and submitting job script for summary of results"
		#create summary script from template

		local ms_analysis_dir=$DATA_VOL_IGF/analysis/$project/fastqc/multisample
		local ms_result_dir=$DATA_VOL_IGF/results/$project/fastqc/multisample
		local summary_path=$ms_analysis_dir/run/summary.$project.pl
		cp $FASTQC_SCRIPT_DIR/summary_fastqc.pl $summary_path
		chmod 770 $summary_path

		local path_fastq_dir=$DATA_VOL_IGF/results/$project_name/fastq
		local project_analysis_dir=$DATA_VOL_IGF/analysis/$project/fastqc
		local project_result_dir=$DATA_VOL_IGF/results/$project/fastqc
		local fastqc_summary_deployment=$DEPLOYMENT_BASE_DIR/project/$project/fastqc

		#configure summary script, it will be executed from fastqc script
		sed -i -e "s/#pathReadsFastq/${path_fastq_dir//\//\\/}/" $summary_path
		sed -i -e "s/#pathAnalysisDir/${project_analysis_dir//\//\\/}/" $summary_path
		sed -i -e "s/#pathReportsDir/${project_result_dir//\//\\/}/" $summary_path
		sed -i -e "s/#pathMSReportsDir/${ms_result_dir//\//\\/}/" $summary_path
		sed -i -e "s/#deploymentServer/$DEPLOYMENT_SERVER/" $summary_path
		sed -i -e "s/#summaryDeployment/${fastqc_summary_deployment//\//\\/}/" $summary_path

		#summary is on hold until fastqc runs are completed 
		#collect fastqc job ids for dependency variable
		local job_id_list=$ms_analysis_dir/job_id_list.txt
		local summary_job_dependency="afterany"
		for job_id in `grep 'cx1' $job_id_list`
		do

			job_id=`basename $job_id .cx1b`
			summary_job_dependency="$summary_job_dependency:$job_id"

		done

		#submit job 
		local log_output_path=`echo $summary_path | perl -pe 's/\.pl/\.log/g'`
		#for testing
		echo "qsub -q $QUEUE -W depend=$summary_job_dependency -o $log_output_path -j oe $summary_path"
		local job_id=`qsub -q $QUEUE -W depend=$summary_job_dependency -o $log_output_path -j oe $summary_path`
		echo "`$NOW`Job ID:$job_id"

	done

}




SEQRUN_NAME=`basename $INPUT_SEQRUN_DIR`
PATH_RUN_DIR_BCL2FASTQ=$DATA_VOL_IGF/analysis/seqrun/bcl2fastq/$TODAY
#PATH_RUN_DIR=/home/mkanwagi/analysis/seqrun/$SEQRUN_NAME/$TODAY
mkdir -p $PATH_RUN_DIR_BCL2FASTQ


BCL2FASTQ_JOB_ID_LIST=$PATH_RUN_DIR_BCL2FASTQ/bcl2fastq.$SEQRUN_NAME.job_id_list.txt
#intialise bcl2Fastq Job ID file
#echo -n "" > $BCL2FASTQ_JOB_ID_LIST
#chmod 660 $BCL2FASTQ_JOB_ID_LIST


# BCL2FASTQ RUNS
#############
for LANE in {1..8}
do
	submitbcl2fastqJobs $INPUT_SEQRUN_DIR $LANE
done

# FASTQC RUNS
#############
submitfastqcJobs $INPUT_SEQRUN_DIR

# BWA RUNS
#############


























exit 1


			




